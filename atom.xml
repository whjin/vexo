<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴华锦</title>
  
  <subtitle>吴华锦的个人主页</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://whjin.github.io/"/>
  <updated>2023-01-27T05:58:20.943Z</updated>
  <id>https://whjin.github.io/</id>
  
  <author>
    <name>吴华锦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>功能代码集合</title>
    <link href="https://whjin.github.io/2023/01/24/technical/%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81%E9%9B%86%E5%90%88/"/>
    <id>https://whjin.github.io/2023/01/24/technical/功能代码集合/</id>
    <published>2023-01-23T16:35:33.000Z</published>
    <updated>2023-01-27T05:58:20.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS原型链"><a href="#JS原型链" class="headerlink" title="JS原型链"></a>JS原型链</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">person.<span class="property">__proto__</span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="title class_">String</span>.<span class="property">__proto__</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="title class_">String</span>.<span class="property">constructor</span> = <span class="title class_">Function</span>;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="JS继承"><a href="#JS继承" class="headerlink" title="JS继承"></a>JS继承</h3><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Parent&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Child&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br></pre></td></tr></table></figure><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;Child&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Persion</span>();</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br></pre></td></tr></table></figure><h3 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_new</span>(<span class="params">constructor, ...arg</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  obj.<span class="property">__proto__</span> = constructor.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">let</span> res = constructor.<span class="title function_">apply</span>(obj, arg);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(res) === <span class="string">&quot;[object Object]&quot;</span> ? res : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JS原型链&quot;&gt;&lt;a href=&quot;#JS原型链&quot; class=&quot;headerlink&quot; title=&quot;JS原型链&quot;&gt;&lt;/a&gt;JS原型链&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;sayName&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;name&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Person&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.&lt;span class=&quot;property&quot;&gt;__proto__&lt;/span&gt; = &lt;span class=&quot;title class_&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;__proto__&lt;/span&gt; = &lt;span class=&quot;title class_&quot;&gt;Function&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;constructor&lt;/span&gt; = &lt;span class=&quot;title class_&quot;&gt;Function&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue技术点汇总</title>
    <link href="https://whjin.github.io/2023/01/22/technical/Vue%E6%8A%80%E6%9C%AF%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>https://whjin.github.io/2023/01/22/technical/Vue技术点汇总/</id>
    <published>2023-01-22T08:57:15.000Z</published>
    <updated>2023-01-27T07:09:27.492Z</updated>
    
    <content type="html"><![CDATA[<h3 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h3><p>根据数据类型【数组和对象】进行不同处理。</p><ol><li><p>对象内部通过<code>defineReactive</code>方法，使用<code>Object.defineProperty()</code>监听数据属性的<code>get</code>进行数据依赖收集，再通过<code>set</code>完成数据更新。</p></li><li><p>数组则通过重写数组方法实现。扩展<code>7</code>个变更方法（<code>push/pop/shift/unshift/splice/reverse/sort</code>），通过监听这些方法收集依赖和派发更新。</p></li></ol><blockquote><p>多层对象通过递归实现监听，<code>Vue3</code>使用<code>proxy</code>实现响应式数据。<br>响应式流程：<code>defineReactive</code>定义响应式数据；给属性增加<code>dep</code>收集对应的<code>watcher</code>；等数据变化进行更新。<br><code>dep.depend</code>——<code>get</code>取值，依赖收集；<code>dep.notify</code>——<code>set</code>设置，通知视图更新。</p></blockquote><span id="more"></span><p>性能优化点：1. 对象层级过深；2. 不需要响应式数据不放在<code>data</code>；3. <code>Object.freeze</code>可以冻结数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;响应式数据&quot;&gt;&lt;a href=&quot;#响应式数据&quot; class=&quot;headerlink&quot; title=&quot;响应式数据&quot;&gt;&lt;/a&gt;响应式数据&lt;/h3&gt;&lt;p&gt;根据数据类型【数组和对象】进行不同处理。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对象内部通过&lt;code&gt;defineReactive&lt;/code&gt;方法，使用&lt;code&gt;Object.defineProperty()&lt;/code&gt;监听数据属性的&lt;code&gt;get&lt;/code&gt;进行数据依赖收集，再通过&lt;code&gt;set&lt;/code&gt;完成数据更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数组则通过重写数组方法实现。扩展&lt;code&gt;7&lt;/code&gt;个变更方法（&lt;code&gt;push/pop/shift/unshift/splice/reverse/sort&lt;/code&gt;），通过监听这些方法收集依赖和派发更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;多层对象通过递归实现监听，&lt;code&gt;Vue3&lt;/code&gt;使用&lt;code&gt;proxy&lt;/code&gt;实现响应式数据。&lt;br&gt;响应式流程：&lt;code&gt;defineReactive&lt;/code&gt;定义响应式数据；给属性增加&lt;code&gt;dep&lt;/code&gt;收集对应的&lt;code&gt;watcher&lt;/code&gt;；等数据变化进行更新。&lt;br&gt;&lt;code&gt;dep.depend&lt;/code&gt;——&lt;code&gt;get&lt;/code&gt;取值，依赖收集；&lt;code&gt;dep.notify&lt;/code&gt;——&lt;code&gt;set&lt;/code&gt;设置，通知视图更新。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://whjin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常用方法集</title>
    <link href="https://whjin.github.io/2020/08/23/technical/JavaScript%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E9%9B%86/"/>
    <id>https://whjin.github.io/2020/08/23/technical/JavaScript常用方法集/</id>
    <published>2020-08-23T13:01:36.000Z</published>
    <updated>2023-02-02T16:03:23.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式化日期类型,fmt格式可选择</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">fmt, date</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ret;</span><br><span class="line">  <span class="keyword">let</span> opt = &#123;</span><br><span class="line">    <span class="string">&quot;Y+&quot;</span>: date.<span class="title function_">getFullYear</span>().<span class="title function_">toString</span>(), <span class="comment">// 年</span></span><br><span class="line">    <span class="string">&quot;M+&quot;</span>: (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">toString</span>(), <span class="comment">// 月</span></span><br><span class="line">    <span class="string">&quot;D+&quot;</span>: date.<span class="title function_">getDate</span>().<span class="title function_">toString</span>(), <span class="comment">// 日</span></span><br><span class="line">    <span class="string">&quot;h+&quot;</span>: date.<span class="title function_">getHours</span>().<span class="title function_">toString</span>(), <span class="comment">// 时</span></span><br><span class="line">    <span class="string">&quot;m+&quot;</span>: date.<span class="title function_">getMinutes</span>().<span class="title function_">toString</span>(), <span class="comment">// 分</span></span><br><span class="line">    <span class="string">&quot;s+&quot;</span>: date.<span class="title function_">getSeconds</span>().<span class="title function_">toString</span>(), <span class="comment">// 秒</span></span><br><span class="line">    <span class="string">&quot;ms+&quot;</span>: date.<span class="title function_">getMilliseconds</span>().<span class="title function_">toString</span>() <span class="comment">// 毫秒</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> opt) &#123;</span><br><span class="line">    ret = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;)&quot;</span>).<span class="title function_">exec</span>(fmt);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">      fmt = fmt.<span class="title function_">replace</span>(ret[<span class="number">1</span>], ret[<span class="number">1</span>].<span class="property">length</span> == <span class="number">1</span> ? opt[k] : opt[k].<span class="title function_">padStart</span>(ret[<span class="number">1</span>].<span class="property">length</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> fDate = <span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-MM-DD hh:mm:ss.ms&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(date));</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="时间转换（秒数转时分秒）"><a href="#时间转换（秒数转时分秒）" class="headerlink" title="时间转换（秒数转时分秒）"></a>时间转换（秒数转时分秒）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeFormat</span> (sec) &#123;</span><br><span class="line">    <span class="keyword">let</span> minite = <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec / <span class="number">60</span> % <span class="number">60</span>)) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec / <span class="number">60</span> % <span class="number">60</span>)) : <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec / <span class="number">60</span> % <span class="number">60</span>));</span><br><span class="line">    <span class="keyword">let</span> second = <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec % <span class="number">60</span>)) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec % <span class="number">60</span>)) : <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec % <span class="number">60</span>));</span><br><span class="line">    <span class="keyword">if</span> (sec &lt; <span class="number">3600</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;minite&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> hour = <span class="title class_">Math</span>.<span class="title function_">floor</span>(sec / <span class="number">3600</span>) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(sec / <span class="number">3600</span>) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(sec / <span class="number">3600</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;hour&#125;</span>:<span class="subst">$&#123;minite&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算时分秒差值"><a href="#计算时分秒差值" class="headerlink" title="计算时分秒差值"></a>计算时分秒差值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算时分秒差值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeDiffer</span>(<span class="params">beginTime, endTime</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ret = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> sTime = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY/MM/DD&quot;</span>, date) + <span class="string">&quot; &quot;</span> + beginTime);</span><br><span class="line">  <span class="keyword">if</span> (beginTime &gt;= endTime) &#123;</span><br><span class="line">    date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>() + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> eTime = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY/MM/DD&quot;</span>, date) + <span class="string">&quot; &quot;</span> + endTime);</span><br><span class="line">  <span class="keyword">let</span> differ = eTime - sTime;</span><br><span class="line">  <span class="keyword">let</span> hour = <span class="title class_">Math</span>.<span class="title function_">floor</span>(differ / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">let</span> minute = <span class="title class_">Math</span>.<span class="title function_">floor</span>(differ / <span class="number">1000</span> / <span class="number">60</span> - hour * <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">let</span> second = <span class="title class_">Math</span>.<span class="title function_">floor</span>(differ / <span class="number">1000</span> - hour * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">  ret = &#123;</span><br><span class="line">    <span class="attr">differHour</span>: hour,</span><br><span class="line">    <span class="attr">differMinute</span>: minute,</span><br><span class="line">    <span class="attr">differSecond</span>: second</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; differHour, differMinute, differSecond &#125; = <span class="title function_">timeDiffer</span>(beginTime, endTime);</span><br></pre></td></tr></table></figure><h3 id="数组-对象-深-浅-拷贝"><a href="#数组-对象-深-浅-拷贝" class="headerlink" title="(数组/对象)(深/浅)拷贝"></a>(数组/对象)(深/浅)拷贝</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [&#123; <span class="attr">name</span>: <span class="string">&quot;o&quot;</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">stu</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;o&quot;</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> listCopy1 = [].<span class="title function_">concat</span>(list);</span><br><span class="line"><span class="keyword">let</span> listCopy2 = list.<span class="title function_">slice</span>();</span><br><span class="line"><span class="keyword">let</span> listCopy3 = <span class="title class_">Array</span>.<span class="title function_">from</span>(list);</span><br><span class="line"><span class="keyword">let</span> listCopy4 = [...list];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> objCopy1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line"><span class="keyword">let</span> objCopy2 = &#123; ...obj &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组|对象深拷贝</span></span><br><span class="line"><span class="keyword">let</span> listCopy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(list));</span><br><span class="line"><span class="keyword">let</span> objCopy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝，即复制并独立一份数据，操作不影响原数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(i)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[i] === <span class="string">&quot;object&quot;</span> &amp;&amp; obj[i] !== <span class="literal">null</span>) &#123;</span><br><span class="line">        result[i] = <span class="title function_">deepCopy</span>(obj[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[i] = obj[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> copyObj = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span> &amp;&amp; obj !== <span class="literal">null</span>) &#123;</span><br><span class="line">    copyObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      copyObj[i] = <span class="title function_">deepClone</span>(obj[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    copyObj = obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copyObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6最简方法</span></span><br><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">  result = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter去重</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当前元素在原数据中的第一个索引等于当前索引值，否则返回当前元素</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item, <span class="number">0</span>) == index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!result.<span class="title function_">includes</span>(arr[i])) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组对象排序"><a href="#数组对象排序" class="headerlink" title="数组对象排序"></a>数组对象排序</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组对象排序，比较两个字符串</span></span><br><span class="line">list.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">id</span>.<span class="title function_">localeCompare</span>(b.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="获取上-下个月日期"><a href="#获取上-下个月日期" class="headerlink" title="获取上/下个月日期"></a>获取上/下个月日期</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下个月</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable language_">this</span>.<span class="property">startDate</span>);</span><br><span class="line"><span class="keyword">let</span> nextMonthDate = date.<span class="title function_">setMonth</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">endDate</span> = <span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(nextMonthDate));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上个月个月</span></span><br><span class="line"><span class="keyword">let</span> lastMonthDate = date.<span class="title function_">setMonth</span>(date.<span class="title function_">getMonth</span>() - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="获取前-后7天日期"><a href="#获取前-后7天日期" class="headerlink" title="获取前/后7天日期"></a>获取前/后7天日期</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前7天</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable language_">this</span>.<span class="property">startDate</span>);</span><br><span class="line"><span class="keyword">let</span> afterDate = date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>() + <span class="number">6</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">endDate</span> = <span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(afterDate));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后7天</span></span><br><span class="line"><span class="keyword">let</span> afterDate = date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>() - <span class="number">6</span>);</span><br></pre></td></tr></table></figure><h3 id="一周日期"><a href="#一周日期" class="headerlink" title="一周日期"></a>一周日期</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> weeks=[<span class="string">&quot;周一&quot;</span>,<span class="string">&quot;周二&quot;</span>,<span class="string">&quot;周三&quot;</span>,<span class="string">&quot;周四&quot;</span>,<span class="string">&quot;周五&quot;</span>,<span class="string">&quot;周六&quot;</span>,<span class="string">&quot;周日&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> index = date.<span class="title function_">getDay</span>() ? date.<span class="title function_">getDay</span>() - <span class="number">1</span> : <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">let</span> nowDate = date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>() - index + i);</span><br><span class="line">  <span class="keyword">let</span> formatDate = <span class="title function_">dateFormat</span>(<span class="string">&quot;MM-DD&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(nowDate));</span><br><span class="line">  <span class="keyword">let</span> week = weeks[i]; </span><br><span class="line">  <span class="keyword">let</span> weekDate = <span class="string">`<span class="subst">$&#123;formatDate&#125;</span>(<span class="subst">$&#123;week&#125;</span>)`</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">weekDateColumns</span>.<span class="title function_">push</span>(weekDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击内容切换"><a href="#点击内容切换" class="headerlink" title="点击内容切换"></a>点击内容切换</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> len = <span class="variable language_">this</span>.<span class="property">assistList</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">index</span> &lt; len) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">index</span>++;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">assistInfo</span> = <span class="variable language_">this</span>.<span class="property">assistList</span>[<span class="variable language_">this</span>.<span class="property">index</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">index</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">assistInfo</span> = <span class="variable language_">this</span>.<span class="property">assistList</span>[<span class="variable language_">this</span>.<span class="property">index</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时分秒"><a href="#时分秒" class="headerlink" title="时分秒"></a>时分秒</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">时：<span class="string">`parseInt(count/60/60)`</span></span><br><span class="line">分：<span class="string">`parseInt(count/60)%60`</span></span><br><span class="line">秒：<span class="string">`parseInt(count%60)`</span></span><br></pre></td></tr></table></figure><h3 id="当月第一天和最后一天"><a href="#当月第一天和最后一天" class="headerlink" title="当月第一天和最后一天"></a>当月第一天和最后一天</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一天</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">date.<span class="title function_">setDate</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>, date));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后一天</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> lastDay = <span class="keyword">new</span> <span class="title class_">Date</span>(date.<span class="title function_">getFullYear</span>(), date.<span class="title function_">getMonth</span>() + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>, lastDay));</span><br></pre></td></tr></table></figure><h3 id="fetch接口请求"><a href="#fetch接口请求" class="headerlink" title="fetch接口请求"></a>fetch接口请求</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> api = <span class="string">&quot;https://api.com&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> headerConfig = &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="title class_">Accept</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(api, headerConfig);</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按键处理方法"><a href="#按键处理方法" class="headerlink" title="按键处理方法"></a>按键处理方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#container&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> &#123; key, keyCode, code &#125; = e;</span><br><span class="line">  <span class="keyword">let</span> template = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;e.key&quot;</span>,</span><br><span class="line">      <span class="attr">content</span>: key == <span class="string">&quot; &quot;</span> ? <span class="string">&quot;Space&quot;</span> : key,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;e.keyCode&quot;</span>,</span><br><span class="line">      <span class="attr">content</span>: keyCode,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;e.code&quot;</span>,</span><br><span class="line">      <span class="attr">content</span>: code,</span><br><span class="line">    &#125;,</span><br><span class="line">  ].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    template += <span class="string">`&lt;div class=&quot;key&quot;&gt;&lt;small&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/small&gt;<span class="subst">$&#123;item.content&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  container.<span class="property">innerHTML</span> = template;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  scroll-behavior: smooth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">110px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;&quot;</span>) center no-repeat dodgerblue;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="built_in">calc</span>(<span class="number">100vh</span> + <span class="number">50px</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自适应内部元素"><a href="#自适应内部元素" class="headerlink" title="自适应内部元素"></a>自适应内部元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">figure</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: min-content;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">figure</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iview封装菜单menu"><a href="#iview封装菜单menu" class="headerlink" title="iview封装菜单menu"></a>iview封装菜单menu</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;i-submenu :name=&quot;menuList.name&quot;&gt;</span><br><span class="line">    &lt;!-- 父级菜单 --&gt;</span><br><span class="line">    &lt;template slot=&quot;title&quot;&gt;&#123;&#123; menuList.title &#125;&#125;&lt;/template&gt;</span><br><span class="line">    &lt;template v-for=&quot;(item, index) in menuList.children&quot;&gt;</span><br><span class="line">      &lt;!-- 如果还要子集，继续调用 --&gt;</span><br><span class="line">      &lt;left-menu-nav v-if=&quot;item.hasOwnProperty(&#x27;children&#x27;)&quot; :menuList=&quot;item&quot;&gt;&lt;/left-menu-nav&gt;</span><br><span class="line">      &lt;!-- 无子菜单 --&gt;</span><br><span class="line">      &lt;i-menu-item v-else :name=&quot;item.name&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/i-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/i-submenu&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;leftMenuNav&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    menuList: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;Layout&gt;</span><br><span class="line">    &lt;Sider hide-trigger collapsible :width=&quot;192&quot; :collapsed-width=&quot;64&quot; v-model=&quot;collapsed&quot; class=&quot;left-sider&quot; :style=&quot;&#123; overflow: &#x27;hidden&#x27; &#125;&quot;&gt;</span><br><span class="line">        &lt;i-menu class=&quot;menu-position&quot; ref=&quot;menu&quot; :active-name=&quot;selectItem&quot; :open-names=&quot;menuOpenName&quot; @on-select=&quot;changeSelectItem&quot;&gt;</span><br><span class="line">            &lt;template v-for=&quot;(item, index) in menuList&quot; :name=&quot;item.name&quot;&gt;</span><br><span class="line">                &lt;!-- 有子菜单 --&gt;</span><br><span class="line">                &lt;left-menu-nav v-if=&quot;item.hasOwnProperty(&#x27;children&#x27;)&quot; :menuList=&quot;item&quot;&gt;&lt;/left-menu-nav&gt;</span><br><span class="line">                &lt;!-- 无子菜单 --&gt;</span><br><span class="line">                &lt;i-menu-item v-else :name=&quot;item.name&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/i-menu-item&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/i-menu&gt;</span><br><span class="line">    &lt;/Sider&gt;</span><br><span class="line">    &lt;Content class=&quot;main-content-con&quot;&gt;</span><br><span class="line">        &lt;Layout class=&quot;main-layout-con&quot;&gt;</span><br><span class="line">            &lt;Content class=&quot;content-wrapper&quot; style=&quot;position: relative&quot;&gt;</span><br><span class="line">                &lt;router-view style=&quot;height: 100%&quot; /&gt;</span><br><span class="line">                &lt;div v-show=&quot;lockEnable&quot; class=&quot;lockBox&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;ABackTop :height=&quot;100&quot; :bottom=&quot;80&quot; :right=&quot;50&quot; container=&quot;.content-wrapper&quot;&gt;&lt;/ABackTop&gt;</span><br><span class="line">            &lt;/Content&gt;</span><br><span class="line">        &lt;/Layout&gt;</span><br><span class="line">    &lt;/Content&gt;</span><br><span class="line">&lt;/Layout&gt;</span><br></pre></td></tr></table></figure><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> images = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">entries</span>) =&gt; &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> image = entry.<span class="property">target</span>;</span><br><span class="line">      <span class="keyword">const</span> data_src = image.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-src&quot;</span>);</span><br><span class="line">      image.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, data_src);</span><br><span class="line">      <span class="title class_">ResizeObserver</span>.<span class="title function_">unobserver</span>(image);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback);</span><br><span class="line">images.<span class="title function_">forEach</span>(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">observe</span>(image);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="CSS多行文本省略"><a href="#CSS多行文本省略" class="headerlink" title="CSS多行文本省略"></a>CSS多行文本省略</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-line-clamp: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue字符串换行"><a href="#Vue字符串换行" class="headerlink" title="Vue字符串换行"></a>Vue字符串换行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 添加`white-space:pre`</span><br><span class="line">2. 使用`&lt;pre&gt;`标签替换</span><br></pre></td></tr></table></figure><h3 id="封装iView无限层级菜单"><a href="#封装iView无限层级菜单" class="headerlink" title="封装iView无限层级菜单"></a>封装iView无限层级菜单</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;i-submenu :name=&quot;menuList.name&quot;&gt;</span><br><span class="line">    &lt;!-- 父级菜单 --&gt;</span><br><span class="line">    &lt;template slot=&quot;title&quot;&gt;&#123;&#123;menuList.title&#125;&#125;&lt;/template&gt;</span><br><span class="line">    &lt;template v-for=&quot;(item,index) in menuList.children&quot;&gt;</span><br><span class="line">      &lt;!-- 如果还要子集，继续调用 --&gt;</span><br><span class="line">      &lt;left-menu-nav v-if=&quot;item.children&amp;&amp;item.children.length&quot; :menuList=&quot;item&quot; :key=&quot;item.index&quot;&gt;&lt;/left-menu-nav&gt;</span><br><span class="line">      &lt;!-- 子菜单 --&gt;</span><br><span class="line">      &lt;i-menu-item :key=&quot;item.id&quot; :name=&quot;item.name&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/i-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/i-submenu&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;leftMenuNav&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    menuList: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">// 父组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i-menu</span> <span class="attr">:active-name</span>=<span class="string">&quot;selectItem&quot;</span> <span class="attr">:open-names</span>=<span class="string">&quot;menuOpenName&quot;</span> @<span class="attr">on-select</span>=<span class="string">&quot;changeSelectItem&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in menuList&quot;</span> <span class="attr">:name</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 有子菜单 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">left-menu-nav</span> <span class="attr">v-if</span>=<span class="string">&quot;item.children &amp;&amp; item.children.length&quot;</span> <span class="attr">:menuList</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">left-menu-nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 无子菜单 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">i-menu-item</span> <span class="attr">v-else</span> <span class="attr">:name</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;</span></span><br><span class="line"><span class="template-variable">    <span class="name">item.title</span></span></span><br><span class="line"><span class="template-variable">  &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">i-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">i-menu</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;upload&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">button</span> id=&quot;btn&quot; class=&quot;btn&quot;&gt;上传文件&lt;/<span class="selector-tag">button</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">input</span> type=&quot;file&quot; id=&quot;<span class="selector-tag">input</span>&quot; class=&quot;<span class="selector-tag">input</span>&quot; /&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.upload</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">rgb</span>(<span class="number">31</span>, <span class="number">154</span>, <span class="number">158</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS控制禁止点击"><a href="#CSS控制禁止点击" class="headerlink" title="CSS控制禁止点击"></a>CSS控制禁止点击</h3><p><code>pointer-events: none; //（禁止鼠标点击事件）</code></p><h3 id="单行居中，多行顶部对齐"><a href="#单行居中，多行顶部对齐" class="headerlink" title="单行居中，多行顶部对齐"></a>单行居中，多行顶部对齐</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.table-item</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16</span>upx;</span><br><span class="line">    <span class="attribute">text-align</span>: justify;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">125</span>upx;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">65</span>upx;</span><br><span class="line">      <span class="attribute">overflow</span>: auto;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">      -webkit-box-orient: vertical;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;日期格式化&quot;&gt;&lt;a href=&quot;#日期格式化&quot; class=&quot;headerlink&quot; title=&quot;日期格式化&quot;&gt;&lt;/a&gt;日期格式化&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 格式化日期类型,fmt格式可选择&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;dateFormat&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fmt, date&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; opt = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;Y+&amp;quot;&lt;/span&gt;: date.&lt;span class=&quot;title function_&quot;&gt;getFullYear&lt;/span&gt;().&lt;span class=&quot;title function_&quot;&gt;toString&lt;/span&gt;(), &lt;span class=&quot;comment&quot;&gt;// 年&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;M+&amp;quot;&lt;/span&gt;: (date.&lt;span class=&quot;title function_&quot;&gt;getMonth&lt;/span&gt;() + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).&lt;span class=&quot;title function_&quot;&gt;toString&lt;/span&gt;(), &lt;span class=&quot;comment&quot;&gt;// 月&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;D+&amp;quot;&lt;/span&gt;: date.&lt;span class=&quot;title function_&quot;&gt;getDate&lt;/span&gt;().&lt;span class=&quot;title function_&quot;&gt;toString&lt;/span&gt;(), &lt;span class=&quot;comment&quot;&gt;// 日&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;h+&amp;quot;&lt;/span&gt;: date.&lt;span class=&quot;title function_&quot;&gt;getHours&lt;/span&gt;().&lt;span class=&quot;title function_&quot;&gt;toString&lt;/span&gt;(), &lt;span class=&quot;comment&quot;&gt;// 时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;m+&amp;quot;&lt;/span&gt;: date.&lt;span class=&quot;title function_&quot;&gt;getMinutes&lt;/span&gt;().&lt;span class=&quot;title function_&quot;&gt;toString&lt;/span&gt;(), &lt;span class=&quot;comment&quot;&gt;// 分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;s+&amp;quot;&lt;/span&gt;: date.&lt;span class=&quot;title function_&quot;&gt;getSeconds&lt;/span&gt;().&lt;span class=&quot;title function_&quot;&gt;toString&lt;/span&gt;(), &lt;span class=&quot;comment&quot;&gt;// 秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;ms+&amp;quot;&lt;/span&gt;: date.&lt;span class=&quot;title function_&quot;&gt;getMilliseconds&lt;/span&gt;().&lt;span class=&quot;title function_&quot;&gt;toString&lt;/span&gt;() &lt;span class=&quot;comment&quot;&gt;// 毫秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; opt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; + k + &lt;span class=&quot;string&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;).&lt;span class=&quot;title function_&quot;&gt;exec&lt;/span&gt;(fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fmt = fmt.&lt;span class=&quot;title function_&quot;&gt;replace&lt;/span&gt;(ret[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], ret[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;property&quot;&gt;length&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ? opt[k] : opt[k].&lt;span class=&quot;title function_&quot;&gt;padStart&lt;/span&gt;(ret[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;property&quot;&gt;length&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; date = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fDate = &lt;span class=&quot;title function_&quot;&gt;dateFormat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;YYYY-MM-DD hh:mm:ss.ms&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Date&lt;/span&gt;(date));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="https://whjin.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Web SQL浏览器数据库实例</title>
    <link href="https://whjin.github.io/2020/08/23/technical/Web-SQL%E6%B5%8F%E8%A7%88%E5%99%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E4%BE%8B/"/>
    <id>https://whjin.github.io/2020/08/23/technical/Web-SQL浏览器数据库实例/</id>
    <published>2020-08-23T12:55:31.000Z</published>
    <updated>2023-01-27T07:09:04.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在做一个消息定时器，需要在离线环境中使用，通过表单写入事项存储到本地，渲染在表格中。尝试过使用Node.js进行文件读写操作，受到UI框架的限制；同时测试了localStorage存储，也达不到想要的效果。最后直接使用WebSql和indexDB来完成。以下是一个DEMO，实际效果正在测试中…</p></blockquote><span id="more"></span><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// html</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-create&quot;</span>&gt;</span>创建user数据表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-insert&quot;</span>&gt;</span>插入数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-query&quot;</span>&gt;</span>查询数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-update&quot;</span>&gt;</span>修改数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-delete&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-drop&quot;</span>&gt;</span>删除user数据表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;websql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;server.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">findId</span> = (<span class="params">id</span>) =&gt; <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> db = <span class="title function_">openDatabase</span>(<span class="string">&quot;MySql&quot;</span>, <span class="string">&quot;1.0&quot;</span>, <span class="string">&quot;Test DB&quot;</span>, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="keyword">let</span> result = db ? <span class="string">&quot;数据库创建成功&quot;</span> : <span class="string">&quot;数据库创建失败&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> websql = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;websql&quot;</span>);</span><br><span class="line">websql.<span class="property">innerHTML</span> = result;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据表</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">USER_TABLE_SQL</span> =</span><br><span class="line">  <span class="string">&quot;create table if not exists userTable (username varchar(12),&quot;</span> + <span class="string">&quot;password varchar(16),info text)&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createTable</span>(<span class="params"></span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">USER_TABLE_SQL</span>,</span><br><span class="line">      [],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;创建user表成功&quot;</span> + result;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;创建user表失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INSERT_USER_SQL</span> = <span class="string">&quot;insert into userTable (username,password,info) values (?,?,?)&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertData</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">INSERT_USER_SQL</span>,</span><br><span class="line">      [user.<span class="property">username</span>, user.<span class="property">password</span>, user.<span class="property">info</span>],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;添加数据成功&quot;</span> + result;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;添加数据失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">QUERY_USER_SQL</span> = <span class="string">&quot;select * from userTable&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">QUERY_USER_SQL</span>,</span><br><span class="line">      [],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;查询数据成功&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result.<span class="property">rows</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;查询数据失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">UPDATE_USER_SQL</span> = <span class="string">&quot;update userTable set username=?,password=?,info=? where rowid=1&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateData</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">UPDATE_USER_SQL</span>,</span><br><span class="line">      [user.<span class="property">username</span>, user.<span class="property">password</span>, user.<span class="property">info</span>],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;修改数据成功&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;修改数据失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DELETE_USER_SQL</span> = <span class="string">&quot;delete from userTable where rowid=(select Max(rowid) from userTable)&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteData</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">DELETE_USER_SQL</span>,</span><br><span class="line">      [],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;删除数据成功&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;删除数据失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据表</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DROP_USER_SQL</span> = <span class="string">&quot;drop table userTable&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dropTable</span>(<span class="params"></span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">DROP_USER_SQL</span>,</span><br><span class="line">      [],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;删除数据表成功&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;删除数据表失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;李宇春&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&quot;abc123456&quot;</span>,</span><br><span class="line">  <span class="attr">info</span>: <span class="string">&quot;快乐女声-&gt;中国好声音&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> btnCreate = <span class="title function_">findId</span>(<span class="string">&quot;btn-create&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> btnInsert = <span class="title function_">findId</span>(<span class="string">&quot;btn-insert&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> btnQuery = <span class="title function_">findId</span>(<span class="string">&quot;btn-query&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> btnUpdate = <span class="title function_">findId</span>(<span class="string">&quot;btn-update&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> btnDelete = <span class="title function_">findId</span>(<span class="string">&quot;btn-delete&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> btnDrop = <span class="title function_">findId</span>(<span class="string">&quot;btn-drop&quot;</span>);</span><br><span class="line">btnCreate.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">createTable</span>();</span><br><span class="line">btnInsert.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">insertData</span>(user);</span><br><span class="line">btnQuery.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">queryData</span>();</span><br><span class="line">btnUpdate.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">updateData</span>(user);</span><br><span class="line">btnDelete.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">deleteData</span>(user);</span><br><span class="line">btnDrop.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">dropTable</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在做一个消息定时器，需要在离线环境中使用，通过表单写入事项存储到本地，渲染在表格中。尝试过使用Node.js进行文件读写操作，受到UI框架的限制；同时测试了localStorage存储，也达不到想要的效果。最后直接使用WebSql和indexDB来完成。以下是一个DEMO，实际效果正在测试中…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据库" scheme="https://whjin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>八月新作</title>
    <link href="https://whjin.github.io/2020/08/23/literature/%E5%85%AB%E6%9C%88%E6%96%B0%E4%BD%9C/"/>
    <id>https://whjin.github.io/2020/08/23/literature/八月新作/</id>
    <published>2020-08-23T12:45:37.000Z</published>
    <updated>2023-01-27T05:31:53.805Z</updated>
    
    <content type="html"><![CDATA[<center><br><strong>八月新作</strong><br>作者：寒青<br><span id="more"></span><br>其一<br>云霞消徂暑，江波观游鱼。<br>罡风穷碧落，盈香绕芙蕖。<br>白鹤沙洲渡，红衣陌上行。<br>山昏影重重，归鸟入巢林。<br><br>其二<br>远方无从往，种蔬小庭轩。<br>狂风舞天地，豪雨涨春涧。<br>山静云高洁，水清林悠远。<br>掌灯频顾盼，花开笑清颜。<br><br>好景词穷无奈何，归去读书有所得。<br>悠悠天地人间境，大美不言自相识。<br></center>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;br&gt;&lt;strong&gt;八月新作&lt;/strong&gt;&lt;br&gt;作者：寒青&lt;br&gt;
    
    </summary>
    
      <category term="文学" scheme="https://whjin.github.io/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="诗词" scheme="https://whjin.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>远方无从往</title>
    <link href="https://whjin.github.io/2020/05/16/literature/%E8%BF%9C%E6%96%B9%E6%97%A0%E4%BB%8E%E5%BE%80/"/>
    <id>https://whjin.github.io/2020/05/16/literature/远方无从往/</id>
    <published>2020-05-16T12:23:35.000Z</published>
    <updated>2023-01-27T05:27:34.499Z</updated>
    
    <content type="html"><![CDATA[<center><br><strong>远方无从往</strong><br>作者：寒青<br><span id="more"></span><br>远方无从往，种蔬小庭轩。<br>罡风舞天地，豪雨涨春涧。<br>风静云高洁，水清林悠远。<br>掌灯频顾盼，云开照清颜。<br></center>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;br&gt;&lt;strong&gt;远方无从往&lt;/strong&gt;&lt;br&gt;作者：寒青&lt;br&gt;
    
    </summary>
    
      <category term="文学" scheme="https://whjin.github.io/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="诗词" scheme="https://whjin.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>typescript开发环境</title>
    <link href="https://whjin.github.io/2019/10/13/technical/typescript%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://whjin.github.io/2019/10/13/technical/typescript开发环境/</id>
    <published>2019-10-13T13:43:15.000Z</published>
    <updated>2023-01-27T07:11:09.401Z</updated>
    
    <content type="html"><![CDATA[<p><strong>安装编译工具</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;tsc &amp;&amp; concurrently \&quot;npm run tsc:w\&quot; \&quot;npm run lite\&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lite&quot;</span>: <span class="string">&quot;lite-server&quot;</span>,</span><br><span class="line">  <span class="string">&quot;tsc&quot;</span>: <span class="string">&quot;tsc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;tsc:w&quot;</span>: <span class="string">&quot;tsc -w&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;concurrently&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lite-server&quot;</span>: <span class="string">&quot;^2.5.4&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;安装编译工具&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;tsc &amp;amp;&amp;amp; concurrently \&amp;quot;npm run tsc:w\&amp;quot; \&amp;quot;npm run lite\&amp;quot;&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;lite&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;lite-server&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;tsc&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;tsc&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;tsc:w&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;tsc -w&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;concurrently&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;^5.0.0&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;lite-server&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;^2.5.4&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TS" scheme="https://whjin.github.io/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件通信</title>
    <link href="https://whjin.github.io/2019/10/12/technical/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>https://whjin.github.io/2019/10/12/technical/Vue组件通信/</id>
    <published>2019-10-11T16:36:21.000Z</published>
    <updated>2023-02-02T16:03:23.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><p>父传子组件的属性，<code>props</code>值可以是一个数组或对象。</p><h1 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h1><p>子传父组件绑定自定义事件。</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;home @title=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;title&#x27;</span>,[&#123;<span class="attr">title</span>:<span class="string">&#x27;这是title&#x27;</span>&#125;])</span><br></pre></td></tr></table></figure><h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><p><code>vuex</code>是一个状态管理器插件，适合数据共享多的项目。</p><ul><li><code>state</code>：定义存储数据的仓库，可通过<code>this.$store.state</code>或<code>mapState</code>访问；</li><li><code>getters</code>：获取<code>store</code>值，可认为是<code>store</code>的计算属性，可通过<code>this.$store.getters</code>或<code>mapGetters</code>访问；</li><li><code>mutations</code>：同步改变<code>store</code>值，为什么会设计成同步，因为<code>mutation</code>是直接改变<code>store</code>值，<code>Vue</code>对操作进行了记录，如果是异步无法追踪改变，可通过<code>mapMutations</code>调用；</li><li><code>actions</code>：异步调用函数执行<code>mutation</code>，进而改变<code>store</code>值，可通过<code>this.$dispatch</code>或<code>mapActions</code>访问；</li><li><code>modules</code>：模块，如果状态过多，可以拆分成模块，最后在入口通过<code>...</code>解构引入。</li></ul><h1 id="parent父实例和children子实例"><a href="#parent父实例和children子实例" class="headerlink" title="parent父实例和children子实例"></a>parent父实例和children子实例</h1><ul><li>父组件<code>this.$children</code></li><li>子组件<code>this.$parent</code></li></ul><p><code>children</code>和<code>parent</code>并不保证顺序，也不是响应式，只能拿到一级父组件和子组件。</p><h1 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;home ref=<span class="string">&quot;home&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="comment">// this.$refs.home 即可拿到子组件的实例,就可以直接操作 data 和 methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="root"><a href="#root" class="headerlink" title="$root"></a>$root</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>) <span class="comment">//获取根实例，最后所有组件都是挂载到根实例上</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>.<span class="property">$children</span>[<span class="number">0</span>]) <span class="comment">//获取根实例的一级子组件</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="property">$children</span>[<span class="number">0</span>]) <span class="comment">//获取根实例的二级子组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sync"><a href="#sync" class="headerlink" title=".sync"></a>.sync</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;home :title.<span class="property">sync</span>=<span class="string">&quot;title&quot;</span> /&gt;</span><br><span class="line"><span class="comment">//编译时会被扩展为</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">home</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>  @<span class="attr">update:title</span>=<span class="string">&quot;val =&gt; title = val&quot;</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="comment">// 子组件可以通过$emit触发 update 方法改变</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:title&quot;</span>, <span class="string">&#x27;这是新的title&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h1><p><code>v-slot</code>作用就是将父组件的<code>template</code>传入子组件。</p><p>插槽分类：匿名插槽（默认插槽），没有命名，有且仅有一个。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;todo-list&gt; </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       任意内容</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是匿名插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/todo-list&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span>我是默认值<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="comment">//v-slot:default写上感觉和具名写法比较统一,容易理解,也可以不用写</span></span><br></pre></td></tr></table></figure><p>具名插槽：相对匿名插槽组件<code>slot</code>标签带<code>name</code>命名。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;todo-list&gt; </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       任意内容</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是匿名插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/todo-list&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span>&gt;</span>我是默认值<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>作用域插槽：子组件内数据可以被父页面拿到（解决了数据只能从父页面传递给子组件）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;todo-list&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">&quot;slotProps&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">   &#123;&#123;slotProps.user.firstName&#125;&#125;</span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span> </span><br><span class="line">&lt;/todo-list&gt; </span><br><span class="line"><span class="comment">//slotProps 可以随意命名</span></span><br><span class="line"><span class="comment">//slotProps 获取的是子组件标签slot上属性数据的集合所有v-bind:user=&quot;user&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">:user</span>=<span class="string">&quot;user&quot;</span> <span class="attr">:test</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; user.lastName &#125;&#125;</span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span> </span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">user</span>:&#123;</span><br><span class="line">        <span class="attr">lastName</span>:<span class="string">&quot;Zhang&quot;</span>,</span><br><span class="line">        <span class="attr">firstName</span>:<span class="string">&quot;san&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">test</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// &#123;&#123; user.lastName &#125;&#125;是默认数据  v-slot:todo 当父页面没有(=&quot;slotProps&quot;)</span></span><br></pre></td></tr></table></figure><h1 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h1><ol><li>生命一个全局Vue实例变量<code>EventBus</code>，把所有的通信数据、事件监听都存储到这个变量上；</li><li>类似于Vuex，但这种方式只适用于极小的项目；</li><li>原理就是利用<code>on</code>和<code>emit</code>，并实例化一个全局Vue实现数据共享；</li><li>可以实现平级、嵌套组件传值，但是对应的事件名<code>eventTarget</code>必须是全局唯一的。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 main.js</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$eventBus</span>=<span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传值组件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$eventBus</span>.$emit(<span class="string">&#x27;eventTarget&#x27;</span>,<span class="string">&#x27;这是eventTarget传过来的值&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收组件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$eventBus</span>.$on(<span class="string">&quot;eventTarget&quot;</span>,<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;eventTarget&#x27;</span>,v);<span class="comment">//这是eventTarget传过来的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h1><ol><li>方案一：</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由定义</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/describe/:id&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Describe</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页面传参</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">`/describe/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 页面获取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure><ol start="2"><li>方案二：</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由定义</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/describe&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">  <span class="attr">omponent</span>: <span class="title class_">Describe</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页面传参</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 页面获取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure><ol start="3"><li>方案三：</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由定义</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/describe&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Describe</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页面传参</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/describe&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: id</span><br><span class="line">  <span class="string">`&#125;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">// 页面获取</span></span><br><span class="line"><span class="string">this.$route.query.id</span></span><br></pre></td></tr></table></figure><p>三种方案对比，方案二参数不会拼接在路由后面，页面刷新参数会丢失；方案一和三参数拼接在后面，暴露了信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;props&quot;&gt;&lt;a href=&quot;#props&quot; class=&quot;headerlink&quot; title=&quot;props&quot;&gt;&lt;/a&gt;props&lt;/h1&gt;&lt;p&gt;父传子组件的属性，&lt;code&gt;props&lt;/code&gt;值可以是一个数组或对象。&lt;/p&gt;
&lt;h1 id=&quot;emit&quot;&gt;&lt;a href=&quot;#emit&quot; class=&quot;headerlink&quot; title=&quot;$emit&quot;&gt;&lt;/a&gt;$emit&lt;/h1&gt;&lt;p&gt;子传父组件绑定自定义事件。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://whjin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>清除浮动细节介绍</title>
    <link href="https://whjin.github.io/2019/10/11/technical/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%BB%86%E8%8A%82%E4%BB%8B%E7%BB%8D/"/>
    <id>https://whjin.github.io/2019/10/11/technical/清除浮动细节介绍/</id>
    <published>2019-10-11T05:57:28.000Z</published>
    <updated>2023-02-02T16:03:23.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>浮动<code>float</code>的渲染位置在行框与包含块之间，这样可以使得行框内文字与浮动元素不重叠，并且环绕它显示。在布局过程中经常使用它实现左右并排布局的效果。但是，由于浮动特性，容器如果没有明确设定高度，会依照普通流内元素高度设置，这样就会导致脱离普通流的浮动元素溢出容器，影响后面的元素布局。</p><span id="more"></span><p>已知的清除浮动元素方法：</p><ol><li>采用一个<code>HTML</code>标签，以及<code>css</code>的<code>clear</code>属性，手动清除浮动；</li><li>采用伪类<code>:after</code>动态建立一个块元素，设定<code>clear</code>属性，清除之前的浮动元素；</li><li>采用<code>css overflow</code>非<code>visible</code>值（<code>overflow:auto/overflow:hidden</code>）设定使父容器包含浮动元素；</li><li>采用<code>display:table/display:table-cell</code>等<code>table</code>系列属性将父元素变成<code>table</code>形式自动包含浮动元素；</li><li>使用<code>table</code>以及<code>td</code>标签作为浮动元素容器；</li><li>采用<code>float:left/float:right</code>方式将父元素同样浮动，就可以包含浮动内容；</li><li>在<code>IE 6/7</code>的标准文档模式中设置<code>width/height/zoom</code>等样式来自动清除浮动；</li></ol><h2 id="使用clear样式清除"><a href="#使用clear样式清除" class="headerlink" title="使用clear样式清除"></a>使用clear样式清除</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear-float</span> &#123;<span class="attribute">clear</span>:both;&#125; </span><br></pre></td></tr></table></figure><p><code>clear</code>属性是<code>CSS 1</code>就提供的用来清除浮动的样式，设置了<code>clear</code>属性的元素，其上边框位置会紧贴浮动元素的<code>margin-bottom</code>边界位置渲染，忽略其<code>margin-top</code>设置。这样父容器高度为设定（默认值是<code>auto</code>）时，由于定义的清除浮动样式元素所在位置处于浮动元素下，容器计算后的实际高度就包含了浮动元素。</p><h2 id="使用伪元素-after清除"><a href="#使用伪元素-after清除" class="headerlink" title="使用伪元素:after清除"></a>使用伪元素:after清除</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.after-clear-float</span> <span class="selector-pseudo">:after</span>&#123;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>; <span class="attribute">display</span>:block; <span class="attribute">clear</span>:both;&#125;</span><br></pre></td></tr></table></figure><p><code>:after</code>伪元素是在<code>CSS 2</code>规范内提出的，<code>IE 6/7</code>并不支持。它的作用是在指定该伪元素内部，所有子元素最后自动生成一个伪元素，并且可以为这个伪元素设定样式。在设定样式中，使用<code>clear</code>属性即可达到与手动添加元素指定清理的效果。</p><p><strong>注意兼容问题：</strong></p><h2 id="使用overflow清除"><a href="#使用overflow清除" class="headerlink" title="使用overflow清除"></a>使用overflow清除</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.overflow-clear-float</span> &#123;<span class="attribute">overflow</span>:hidden;&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="selector-class">.overflow-clear-float</span> &#123;<span class="attribute">overflow</span>:auto;&#125;</span><br></pre></td></tr></table></figure><p><code>overflow</code>样式值为非<code>visible</code>时，实际上是创建了CSS 2.1规范定义的BFC。创建了它的元素，会重新计算其内部元素位置，从未获得确切高度。这样父容器也就包含了浮动元素高度。</p><h2 id="使用display-table清除"><a href="#使用display-table清除" class="headerlink" title="使用display:table清除"></a>使用display:table清除</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.table-clear-float</span> &#123;<span class="attribute">display</span>:table&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="selector-class">.table-clear-float</span> &#123;<span class="attribute">display</span>:table-cell&#125;</span><br></pre></td></tr></table></figure><p>当元素<code>display</code>值被设定为<code>table</code>或<code>table-cell</code>时，同样创建了CSS 2.1规范定义的BFC。这样父容器也就包含了浮动元素高度。</p><h2 id="使用表格类元素作为浮动元素容器"><a href="#使用表格类元素作为浮动元素容器" class="headerlink" title="使用表格类元素作为浮动元素容器"></a>使用表格类元素作为浮动元素容器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”float:left”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当使用<code>table td th</code>等<code>table</code>系列标签时，元素的<code>display</code>值实际上是<code>display:table</code>系列，这同样也创建了BFC。这样父容器也就包含了浮动元素高度。同时在IE 6/7中，<code>table td th</code>等<code>table</code>系列标签天然拥有<code>haslayout</code>特性，这也可以使容器自动包含浮动元素高度。</p><h2 id="使用浮动父元素清除"><a href="#使用浮动父元素清除" class="headerlink" title="使用浮动父元素清除"></a>使用浮动父元素清除</h2><p>当元素设置<code>float:left/float:right</code>时，创建BFC。父容器包含浮动元素高度。</p><h2 id="触发haslayout清除"><a href="#触发haslayout清除" class="headerlink" title="触发haslayout清除"></a>触发haslayout清除</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">haslayout-<span class="attribute">clear</span>-<span class="attribute">float</span>:&#123;<span class="attribute">width</span>:<span class="number">1px</span>&#125;</span><br><span class="line">或</span><br><span class="line"><span class="selector-class">.haslayout-clear-float</span>:&#123;<span class="attribute">height</span>:<span class="number">1px</span>&#125;</span><br><span class="line">或</span><br><span class="line"><span class="selector-class">.haslayout-clear-float</span>:&#123;zoom:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p><code>layout</code>是IE的专有概念，它决定了元素如何对其内容进行定位和尺寸计算。可以被某些<code>css property</code>特性不可逆的触发，而某些HTML元素本身就具有<code>layout</code>。</p><p><code>layout</code>在IE中可以通过<code>hasLayout</code>属性来判断一个元素是否具有<code>layout</code>，如<code>object.currentStyle.hasLayout</code>。</p><p><code>layout</code>是IE浏览器渲染引擎的一个内部组成部分，在IE浏览器中，一个元素要么自己对自身的内容进行组织和计算大小，要么依赖于包含块来计算尺寸和组织内容。为了协调这两种方式的矛盾，渲染引擎采用了<code>hasLayout</code>属性，属性值可以为<code>true</code>或<code>false</code>。当一个元素的<code>hasLayout</code>属性值为<code>true</code>时，我们说这个元素有一个布局<code>layout</code>，或拥有布局。</p><p><strong>默认拥有布局的元素：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>, <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>, <span class="tag">&lt;<span class="name">tr</span>&gt;</span>, <span class="tag">&lt;<span class="name">th</span>&gt;</span>, <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>, <span class="tag">&lt;<span class="name">button</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>, <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>, <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>, <span class="tag">&lt;<span class="name">embed</span>&gt;</span>, <span class="tag">&lt;<span class="name">object</span>&gt;</span>, <span class="tag">&lt;<span class="name">applet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可以触发<code>hasLayout</code>的<code>CSS</code>特性：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">display: inline-block</span><br><span class="line">height: (除 auto 外任何值)</span><br><span class="line">width: (除 auto 外任何值)</span><br><span class="line">float: (left 或 right)</span><br><span class="line">position: absolute</span><br><span class="line">writing-mode: tb-rl</span><br><span class="line">zoom: (除 normal 外任意值)</span><br></pre></td></tr></table></figure><p><strong><code>IE7还有一些额外的属性可以触发</code>hasLayout`：</strong></p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">min-height: (任意值)</span><br><span class="line">min-width: (任意值)</span><br><span class="line">max-height: (除 none 外任意值)</span><br><span class="line">max-width: (除 none 外任意值)</span><br><span class="line">overflow: (除 visible 外任意值，仅用于块级元素)</span><br><span class="line">overflow-x: (除 visible 外任意值，仅用于块级元素)</span><br><span class="line">overflow-y: (除 visible 外任意值，仅用于块级元素)</span><br><span class="line">position: fixed</span><br></pre></td></tr></table></figure><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>对于初级开发者，推荐使用以下清除浮动元素的方式：</p><ul><li>采用一个<code>HTML</code>标签，以及<code>css</code>的<code>clear</code>属性，来手动清除浮动；</li><li>为元素设置<code>overflow:hidden</code>或<code>overflow:auto</code>值，配合可以设置<code>zoom:1</code>样式触发<code>IE 6 hasLayout</code>特性，来达到兼容所有浏览器清除浮动的目的；</li><li>采用伪元素<code>:after</code>配合可以设置<code>zoom:1</code>样式触发<code>IE6/7 hasLayout</code>特性。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;浮动&lt;code&gt;float&lt;/code&gt;的渲染位置在行框与包含块之间，这样可以使得行框内文字与浮动元素不重叠，并且环绕它显示。在布局过程中经常使用它实现左右并排布局的效果。但是，由于浮动特性，容器如果没有明确设定高度，会依照普通流内元素高度设置，这样就会导致脱离普通流的浮动元素溢出容器，影响后面的元素布局。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="https://whjin.github.io/tags/CSS/"/>
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置</title>
    <link href="https://whjin.github.io/2019/09/05/technical/vscode%E9%85%8D%E7%BD%AE/"/>
    <id>https://whjin.github.io/2019/09/05/technical/vscode配置/</id>
    <published>2019-09-04T20:41:29.000Z</published>
    <updated>2023-01-27T07:10:57.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ol><li><code>Beautify</code></li><li><code>chinese Language</code></li><li><code>open in browser</code></li><li><code>Vetur</code></li><li><code>minapp</code></li></ol><span id="more"></span><h1 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;window.zoomLevel&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;markdown.preview.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HookyQR.beautify&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HookyQR.beautify&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[json]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HookyQR.beautify&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*.tpl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;.easymockrc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatter.html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js-beautify-html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatterOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;js-beautify-html&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;wrap_attributes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;force-aligned&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;window.zoomLevel&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;markdown.preview.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode.html-language-features&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[json]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*.tpl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;.easymockrc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.cjson&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jsonc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.wxss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;css&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.wxs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javascript&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.hideCursorInOverviewRuler&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.hover.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.autoClosingBrackets&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.sideBar.location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;left&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[jsonc]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatter.html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js-beautify-html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;emmet.includeLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;wxml&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;velocity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minapp-vscode.disableAutoConfig&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;javascript&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;javascriptreact&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;autoFix&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;autoFix&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDelete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;liveServer.settings.donotShowInfoMsg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[typescript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-icons&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; title=&quot;插件&quot;&gt;&lt;/a&gt;插件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Beautify&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chinese Language&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open in browser&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vetur&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minapp&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="编辑器" scheme="https://whjin.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式实例</title>
    <link href="https://whjin.github.io/2019/08/29/technical/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AE%9E%E4%BE%8B/"/>
    <id>https://whjin.github.io/2019/08/29/technical/正则表达式实例/</id>
    <published>2019-08-29T13:41:36.000Z</published>
    <updated>2023-02-04T14:37:06.047Z</updated>
    
    <content type="html"><![CDATA[<h4 id="商品计价的千分位分隔符转换"><a href="#商品计价的千分位分隔符转换" class="headerlink" title="商品计价的千分位分隔符转换"></a>商品计价的千分位分隔符转换</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> total.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/\B(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="去除字符串的空格"><a href="#去除字符串的空格" class="headerlink" title="去除字符串的空格"></a>去除字符串的空格</h3><ol><li>字符串原生<code>trim</code>方法，只能去除两侧空格，返回新字符串</li><li><code>replace</code>正则匹配<ul><li>去除所有空格：<code>str = str.replace(/\s*/g,&quot;&quot;)</code>  </li><li>去除两侧空格：<code>str = str.replace(/^\s*|\s*$]/g,&quot;&quot;)</code></li><li>去除左侧空格：<code>str = str.replace(/^\s*/,&quot;&quot;)</code></li><li>去除右侧空格：<code>str = str.replace(/\s*$/,&quot;&quot;)</code>  </li></ul></li></ol><span id="more"></span><h3 id="中文、英文、数字但不包括下划线等符号"><a href="#中文、英文、数字但不包括下划线等符号" class="headerlink" title="中文、英文、数字但不包括下划线等符号"></a>中文、英文、数字但不包括下划线等符号</h3><ul><li>中文：<code>^[\u4e00-\u9fa5]&#123;0,&#125;$</code></li><li>中文、英文、数字：<code>^[\u4e00-\u9fa5A-Za-z0-9_]+$</code>（包括下划线），<code>[\u4e00-\u9fa5A-Za-z0-9]+$</code>/<code>[\u4e00-\u9fa5A-Za-z0-9]&#123;2,20&#125;$</code>（不包括下划线）</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;商品计价的千分位分隔符转换&quot;&gt;&lt;a href=&quot;#商品计价的千分位分隔符转换&quot; class=&quot;headerlink&quot; title=&quot;商品计价的千分位分隔符转换&quot;&gt;&lt;/a&gt;商品计价的千分位分隔符转换&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total.&lt;span class=&quot;title function_&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;regexp&quot;&gt;/\B(?=(\d&amp;#123;3&amp;#125;)+$)/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;去除字符串的空格&quot;&gt;&lt;a href=&quot;#去除字符串的空格&quot; class=&quot;headerlink&quot; title=&quot;去除字符串的空格&quot;&gt;&lt;/a&gt;去除字符串的空格&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;字符串原生&lt;code&gt;trim&lt;/code&gt;方法，只能去除两侧空格，返回新字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace&lt;/code&gt;正则匹配&lt;ul&gt;
&lt;li&gt;去除所有空格：&lt;code&gt;str = str.replace(/\s*/g,&amp;quot;&amp;quot;)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;去除两侧空格：&lt;code&gt;str = str.replace(/^\s*|\s*$]/g,&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去除左侧空格：&lt;code&gt;str = str.replace(/^\s*/,&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去除右侧空格：&lt;code&gt;str = str.replace(/\s*$/,&amp;quot;&amp;quot;)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="正则" scheme="https://whjin.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>状态管理与Vuex</title>
    <link href="https://whjin.github.io/2019/08/24/technical/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B8%8EVuex/"/>
    <id>https://whjin.github.io/2019/08/24/technical/状态管理与Vuex/</id>
    <published>2019-08-24T01:39:56.000Z</published>
    <updated>2023-01-27T07:04:14.554Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的业务中，经常有跨组件共享数据的需求，<code>Vuex</code>就是设计用来统一管理组件状态的，它定义了一系列规范来使用和操作数据，使组件的应用更高效。</p><p>引入<code>Vuex</code>之后统一对共享数据进行管理存放，在各个页面中可以利用<code>commit</code>方法提交<code>mutation</code>对共享数据进行修改。</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">count</span>++,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">count</span>--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">count</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;increment&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;decrement&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在实际的业务中，经常有跨组件共享数据的需求，&lt;code&gt;Vuex&lt;/code&gt;就是设计用来统一管理组件状态的，它定义了一系列规范来使用和操作数据，使组件的应用更高效。&lt;/p&gt;
&lt;p&gt;引入&lt;code&gt;Vuex&lt;/code&gt;之后统一对共享数据进行管理存放，在各个页面中可以利用&lt;code&gt;commit&lt;/code&gt;方法提交&lt;code&gt;mutation&lt;/code&gt;对共享数据进行修改。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://whjin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue技术细节</title>
    <link href="https://whjin.github.io/2019/08/23/technical/Vue%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"/>
    <id>https://whjin.github.io/2019/08/23/technical/Vue技术细节/</id>
    <published>2019-08-23T07:21:15.000Z</published>
    <updated>2023-01-27T07:09:41.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="key属性"><a href="#key属性" class="headerlink" title="key属性"></a>key属性</h1><p>为了方便<code>Vue</code>实例跟踪每个节点的身份，从而重用和重新排列现有元素，需要为每项提供一个唯一的<code>key</code>属性。理想的<code>key</code>属性值是每项都有并且唯一的<code>id</code>。<code>key</code>的工作方式类似于一个属性，所以需要用<code>v-bind</code>来绑定动态值。</p><span id="more"></span><h1 id="生命周期函数表"><a href="#生命周期函数表" class="headerlink" title="生命周期函数表"></a>生命周期函数表</h1><table><thead><tr><th>生命周期函数</th><th>含义</th></tr></thead><tbody><tr><td><code>beforeCreate</code>（创建前）</td><td>组件实例刚被创建，组件属性计算之前，比如<code>data</code>属性等</td></tr><tr><td><code>created</code>（创建后）</td><td>组件实例刚创建完成，属性已经绑定，此时<code>DOM</code>还未完成，<code>$el</code>属性还不存在</td></tr><tr><td><code>beforeMount</code>（载入前）</td><td>模板编译、挂载之前</td></tr><tr><td><code>mounted</code>（载入后）</td><td>模板编译、挂载之后</td></tr><tr><td><code>beforeUpdate</code>（更新前）</td><td>组件更新之前</td></tr><tr><td><code>updated</code>（更新后）</td><td>组件更新之后</td></tr><tr><td><code>beforeDestroy</code>（销毁前）</td><td>组件销毁前调用</td></tr><tr><td><code>destroyed</code>（销毁后）</td><td>组件销毁后调用</td></tr></tbody></table><h1 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h1><p>在<code>Vue</code>中通过<code>props</code>传递数据是单向的，也就是父组件数据会传递给子组件，但是反过来不成立。之所以这样设计，就是尽可能将父子组件解耦，避免子组件无意间修改父组件的状态。</p><p>业务中经常遇到两种需要改变<code>props</code>传递过来数据的情况。一种是父组件传递初始值，子组件将其作为初始值保存起来，在自己的作用域内可以随意使用和修改。这种情况可以在子组件的<code>data</code>中再声明一个数据来引用父组件传递过来的数据。</p><p>另一种情况是<code>props</code>作为需要被转变的原始值传入，这种情况计算属性就可以了。</p><h1 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h1><h2 id="自定义事件及-emit方法"><a href="#自定义事件及-emit方法" class="headerlink" title="自定义事件及$emit方法"></a>自定义事件及$emit方法</h2><p><code>Vue.js</code>允许正向传值，也就是父组件传值给子组件。正向传值不需要条件触发，是主动的，逆向传值则是不允许的，需要主动抛出自定义事件去监听。</p><p><code>this.$emit(&quot;event&quot;,val)</code></p><p><code>$emit</code>为实例方法，用来触发事件监听。其中，参数<code>event</code>代表自定义事件名称，参数<code>val</code>代表通过自定义事件传递的值，注意这里的<code>val</code>是可选参数。</p><p>子组件传值给父组件的时候，事件触发及接收原则是：谁触发的监听谁接收。</p><h1 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h1><p>兄弟组件间的传值最容易想到的解决方案是通过共同的父组件进行中转。其中一个场景是组件1中的某个数量需要在组件2中同步展示。本质上是<code>props</code>和<code>$emit</code>综合使用。</p><h1 id="slot分发内容"><a href="#slot分发内容" class="headerlink" title="slot分发内容"></a>slot分发内容</h1><p><code>slot</code>的官方定义是用于组件内容分发，简单通俗的解释就是在组件化开发中，虽然组件是一样的，但是在不同的使用场景，组件的某一部分需要有不同的内容显示。</p><h2 id="匿名slot"><a href="#匿名slot" class="headerlink" title="匿名slot"></a>匿名slot</h2><p>匿名<code>slot</code>就是没有名字的插槽，特点是可以放任何内容。</p><h2 id="具名slot"><a href="#具名slot" class="headerlink" title="具名slot"></a>具名slot</h2><p>具名<code>slot</code>可以用一个特殊属性<code>name</code>来配置如何分发内容，多个<code>slot</code>可以有不同的名字，具名<code>slot</code>将匹配内容片段中有对应<code>slot</code>特性的元素。</p><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>既然使用<code>methods</code>就可以实现，为什么还需要计算属性呢？原因就是计算属性是基于它的依赖缓存的，一个计算属性所依赖的数据发生变化，它才会重新取值，所以<code>massage</code>只要不改变，计算属性就不更新。但是<code>methods</code>不同，只要重新渲染，它就会被调用，函数就会被执行。</p><p>究竟是使用计算属性还是<code>methods</code>取决于是否需要缓存，当遍历大数组和计算量很大时，应当使用计算属性，除非不希望得到缓存。</p><h1 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h1><p><code>Vue.js</code>提供了一种更通用的方式<code>watch</code>来观察和响应<code>Vue</code>实例上的数据变动，称为侦听器。</p><h1 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h1><p><code>Vue</code>在观察到数据变化时并不是直接更新<code>DOM</code>，而是开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。在缓冲时会去除重复数据，从而避免不必要的计算和<code>DOM</code>操作。然后在下一个事件循环<code>tick</code>中，<code>Vue</code>刷新队列并执行实际（已去重的）工作。</p><p><code>$nextTick</code>就是用来知道什么时候<code>DOM</code>更新完成的。</p><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>自定义指令的选项是由几个钩子函数组成的，每个都是可选的。</p><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li><code>inserted</code>：被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于<code>document</code>中）。</li><li><code>update</code>：被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新。</li><li><code>componentUpdated</code>：被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;key属性&quot;&gt;&lt;a href=&quot;#key属性&quot; class=&quot;headerlink&quot; title=&quot;key属性&quot;&gt;&lt;/a&gt;key属性&lt;/h1&gt;&lt;p&gt;为了方便&lt;code&gt;Vue&lt;/code&gt;实例跟踪每个节点的身份，从而重用和重新排列现有元素，需要为每项提供一个唯一的&lt;code&gt;key&lt;/code&gt;属性。理想的&lt;code&gt;key&lt;/code&gt;属性值是每项都有并且唯一的&lt;code&gt;id&lt;/code&gt;。&lt;code&gt;key&lt;/code&gt;的工作方式类似于一个属性，所以需要用&lt;code&gt;v-bind&lt;/code&gt;来绑定动态值。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://whjin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Redux+API制作meme generator</title>
    <link href="https://whjin.github.io/2019/05/14/technical/Redux%E5%88%B6%E4%BD%9CmemeGenerator/"/>
    <id>https://whjin.github.io/2019/05/14/technical/Redux制作memeGenerator/</id>
    <published>2019-05-14T00:27:51.000Z</published>
    <updated>2023-01-27T07:11:36.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>新建项目<code>create-react-app redux-meme-generator</code></p><p>安装插件<code>npm i -S redux react-redux redux-thunk react-bootstrap</code></p><span id="more"></span><h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><p>运行项目<code>npm run start</code>，清空<code>src</code>下的文件，建立<code>index.js</code>，引入<code>react</code>和<code>react-dom</code>。并在<code>src</code>下新建<code>component</code>、<code>actions</code>、<code>reducer</code>文件夹。</p><p><strong>src/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./component/App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Provider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;fetchMemes&#125; <span class="keyword">from</span> <span class="string">&quot;./actions&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer, <span class="title function_">applyMiddleware</span>(thunk));</span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;store&#x27;</span>, store.<span class="title function_">getState</span>()));</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">fetchMemes</span>());</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">  , <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><p><strong>component/App.js</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to the Meme Generator!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, <span class="literal">null</span>)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure><p>通过以上代码就可以有权限从<code>component</code>通过<code>store</code>取得<code>memes</code>，现在可以进行UI操作。</p><p>环境设置完毕。</p><h1 id="Fetch-Memes-Asyncchronously"><a href="#Fetch-Memes-Asyncchronously" class="headerlink" title="Fetch Memes Asyncchronously"></a>Fetch Memes Asyncchronously</h1><p>在串接API时需要登录账号密码，我们将这组账号密码封装成一个<code>action</code>。</p><p><strong>src/actions/secrets.js</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="string">&#x27;AnnieTsai&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> password = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; username, password &#125;;</span><br></pre></td></tr></table></figure><p>但我们不想在项目公开时，被其他人看到我们的账号密码。因此可以到<code>.gitignore</code>里将这个<code>action</code>的路径写上<code>src/actions/secrets.js</code>，就不会发布出去。</p><p><strong>actions/index.js</strong>，编写从<code>json</code>获取<code>memes</code>的逻辑。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">RECRIVE_MEMES</span> = <span class="string">&#x27;RESEIVE_MEMES&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">receiveMemes</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;memes&#125; = json.<span class="property">data</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">RECRIVE_MEMES</span>,</span><br><span class="line">    memes</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchMemesJson</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.imgflip.com/get_memes&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fetchMemes</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">dispatch</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetchMemesJson</span>()</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">json</span> =&gt;</span> <span class="title function_">dispatch</span>(<span class="title function_">receiveMemes</span>(json)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过<code>fetch</code>来获得所需要的内容。</p><blockquote><p>Fetch API提供了一个JavaScript接口，用于访问和操作HTTP管道的部分，例如请求和响应。它还提供了一个全局<code>fetch()</code>方法，该方法提供了一种简单、合乎逻辑的方式来跨网络异步获取资源。</p></blockquote><h1 id="套用thunk-middileware"><a href="#套用thunk-middileware" class="headerlink" title="套用thunk middileware"></a>套用thunk middileware</h1><p><strong>reducer/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">RECRIVE_MEMES</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../actions&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">memes</span>(<span class="params">state = [], action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">RECRIVE_MEMES</span>:</span><br><span class="line">      <span class="keyword">return</span> action.<span class="property">memes</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="title function_">combineReducers</span>(&#123;memes&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><h1 id="Listing-memes"><a href="#Listing-memes" class="headerlink" title="Listing memes"></a>Listing memes</h1><p>我们可以借由<code>meme name</code>来区分每一个<code>component</code>，每一个<code>meme</code>对象都有<code>name</code>属性值，让它们能够被识别。另外，我们也需要加上<code>key</code>来判别每个对象的唯一性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to the Meme Generator!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">memes</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">meme, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;meme.name&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="Load-more"><a href="#Load-more" class="headerlink" title="Load more"></a>Load more</h1><p>当一个页面有大量的资料时，我们就会进行分页或是浓缩的动作。</p><p>通过<code>constructor</code>建立一个设定显示数量的<code>state</code>。</p><p><strong>src/component/App.js</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">    <span class="attr">memeLimit</span>: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript的<code>slice()</code>让我们可以从某个字符串<code>string.slice()</code>或数组<code>Array.slice()</code>提取某一段信息。在渲染的地方加上：<code>slice(0,this,state,memeLimit)</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">memes</span>.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">memeLimit</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">meme,index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//设置为3，该从第4个开始提取，只会显示后面7个</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;meme.name&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>接下来我要制作一个按钮，让使用者可以点击<code>load more</code>，就可以显示更多<code>memes</code>。当使用者点击这个按钮时，便更新<code>state</code>，把<code>memeLimit</code>再加上10。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">memeLimit</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">memeLimit</span>+<span class="number">10</span>&#125;)</span><br><span class="line">&#125;&#125;&gt;<span class="title class_">Load</span> <span class="number">10</span> more memes...&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="create-meme-items"><a href="#create-meme-items" class="headerlink" title="create meme items"></a>create meme items</h1><p>现在把图片呈现出来</p><p><strong>component/MemeItem.js</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemeItem</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">src</span>=<span class="string">&#123;this.props.meme.url&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">alt</span>=<span class="string">&#123;this.props.meme.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.props.meme.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MemeItem</span>;</span><br></pre></td></tr></table></figure><p>在<code>App.js</code>引入<code>MemeItem.js</code>，并在原本渲染呈现<code>meme name</code>的地方</p><p>转换成<code>MemeItem</code>component tag</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MemeItem</span> key=&#123;index&#125; meme=&#123;meme&#125; /&gt;</span><br></pre></td></tr></table></figure><h1 id="Animating-Memes-Items"><a href="#Animating-Memes-Items" class="headerlink" title="Animating Memes Items"></a>Animating Memes Items</h1><p>要实现鼠标移动图片之上有动画，可以通过<code>css</code>的<code>hover</code>，我们可以通过<code>setState</code>不断地更新<code>hover</code>的状态。在<code>MemeItem</code>component中设置<code>constructor</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">    <span class="attr">hovered</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;新建项目&lt;code&gt;create-react-app redux-meme-generator&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装插件&lt;code&gt;npm i -S redux react-redux redux-thunk react-bootstrap&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Redux" scheme="https://whjin.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>React生命周期</title>
    <link href="https://whjin.github.io/2019/05/13/technical/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://whjin.github.io/2019/05/13/technical/React生命周期/</id>
    <published>2019-05-13T14:57:12.000Z</published>
    <updated>2023-01-27T07:11:57.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-component-lifecycle-生命周期"><a href="#React-component-lifecycle-生命周期" class="headerlink" title="React component lifecycle 生命周期"></a>React component lifecycle 生命周期</h1><p><code>React</code>的生命周期是<code>component</code>在建立和渲染的过程，以<code>component class</code>出发，<code>React</code>会做以下的过程：</p><span id="more"></span><p>依照<code>component</code>被挂入DOM的过程分类，过程中会依序执行<code>component</code>的函数如下：</p><ul><li><p><code>Mounting</code>：<code>component</code>被建立实体（即<code>react element</code>）后，渲染到DOM的过程：</p><ol><li><code>constructor()</code></li><li><code>static getDerivedStateFromProps()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ol></li><li><p><code>Updating</code>：当<code>component</code>收到新的<code>props</code>时，更新状态（<code>state</code>），再重新渲染到DOM的过程：</p><ol><li><code>static getDerivedStateFromProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><code>render()</code></li><li><code>getSnapshotBeforeUpdate()</code></li><li><code>componentDidUpdate()</code></li></ol></li><li><p><code>Unmounting</code>：当<code>component</code>不被使用，从DOM移除的过程</p><ol><li><code>componentWillUnmounted()</code></li></ol></li><li><p><code>Error Handling</code>：当<code>component</code>错误发生时</p><ol><li><code>componentDidCatch()</code></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-component-lifecycle-生命周期&quot;&gt;&lt;a href=&quot;#React-component-lifecycle-生命周期&quot; class=&quot;headerlink&quot; title=&quot;React component lifecycle 生命周期&quot;&gt;&lt;/a&gt;React component lifecycle 生命周期&lt;/h1&gt;&lt;p&gt;&lt;code&gt;React&lt;/code&gt;的生命周期是&lt;code&gt;component&lt;/code&gt;在建立和渲染的过程，以&lt;code&gt;component class&lt;/code&gt;出发，&lt;code&gt;React&lt;/code&gt;会做以下的过程：&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="https://whjin.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>前端插件库</title>
    <link href="https://whjin.github.io/2019/05/12/technical/%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6%E5%BA%93/"/>
    <id>https://whjin.github.io/2019/05/12/technical/前端插件库/</id>
    <published>2019-05-12T03:01:16.000Z</published>
    <updated>2023-02-02T16:03:23.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端插件库"><a href="#前端插件库" class="headerlink" title="前端插件库"></a>前端插件库</h1><h2 id="DataTables"><a href="#DataTables" class="headerlink" title="DataTables"></a>DataTables</h2><p>官网：<a href="https://www.datatables.net/">https://www.datatables.net/</a></p><p>DataTables是jQuery的JavaScript函数库，目的是强化表格操作（如搜索、排序），并自动加入组件引入表格中，使用非常灵活简便。</p><span id="more"></span><p><img src="http://night.myweb.hinet.net/pic/it2018/day1_1.gif" alt=""></p><h2 id="LazyLoad"><a href="#LazyLoad" class="headerlink" title="LazyLoad"></a>LazyLoad</h2><p>官网：<a href="https://github.com/tuupola/lazyload">Lazy Load</a><br>延伸：<a href="https://appelsiini.net/projects/lazyload/">Vanilla JavaScript Lazy Load Plugin</a></p><p>Lazy Load帮助高度较长的网页进行延迟载入图片，尚未浏览到该部分时，不会载入视角外的图片，提高效率。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day2_1.gif" alt=""></p><h2 id="lightSlider"><a href="#lightSlider" class="headerlink" title="lightSlider"></a>lightSlider</h2><p>官网：<a href="https://sachinchoolur.github.io/lightslider/index.html">JQuery lightSlider</a><br>Github：<a href="https://github.com/sachinchoolur/lightslider">sachinchoolur/lightslider</a></p><p>JQuery lightSlider是一个轻量且响应式的跑马灯/幻灯片，附有缩图导览。另外还有相本功能、垂直跑马灯，应用层面广泛。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day3_1.gif" alt=""></p><h2 id="alertify-js"><a href="#alertify-js" class="headerlink" title="alertify.js"></a>alertify.js</h2><p>官网：<a href="https://fabien-d.github.io/alertify.js/">https://fabien-d.github.io/alertify.js/</a><br>Github：<a href="https://github.com/fabien-d/alertify.js">alertify.js</a></p><p>alertify.js是为了美化通知信息而生的JavaScript框架。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day4_1.gif" alt=""></p><h2 id="pickadate-js-日期-时间选择器"><a href="#pickadate-js-日期-时间选择器" class="headerlink" title="pickadate.js-日期/时间选择器"></a>pickadate.js-日期/时间选择器</h2><p>官网：<a href="https://amsul.ca/pickadate.js/">pickadate.js</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day5_1.gif" alt=""></p><h2 id="chosen"><a href="#chosen" class="headerlink" title="chosen"></a>chosen</h2><p>官网：<a href="https://harvesthq.github.io/chosen/">Chosen</a><br>Github：<a href="https://github.com/harvesthq/chosen">chosen</a></p><p>Chosen是一个jQuery的插件，目的是让又长又笨重的下拉式选单变得更友善。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day6_1.gif" alt=""></p><h2 id="typeahead-js"><a href="#typeahead-js" class="headerlink" title="typeahead.js"></a>typeahead.js</h2><p>Github：<a href="https://github.com/twitter/typeahead.js">typeahead.js</a></p><p>由Twitter推出，灵活扎实的建议列表函数库。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day7_1.gif" alt=""></p><h2 id="textillate-js"><a href="#textillate-js" class="headerlink" title="textillate.js"></a>textillate.js</h2><p>官网：<a href="http://textillate.js.org/">textillate.js</a><br>Github：<a href="https://github.com/jschr/textillate">jschr/textillate</a></p><p>textillate.js结合了很多很棒的函数库，简单应用CSS3动画特效。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day8_1.gif" alt=""></p><h2 id="Chart-js"><a href="#Chart-js" class="headerlink" title="Chart.js"></a>Chart.js</h2><p>官网：<a href="https://www.chartjs.org/">Chart.js</a></p><p>对设计师或开发人员，浅显易懂的JavaScript图标应用。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day9_1.gif" alt=""></p><h2 id="highlight-js"><a href="#highlight-js" class="headerlink" title="highlight.js"></a>highlight.js</h2><p>官网：<a href="https://highlightjs.org/">highlight.js</a><br>Github：<a href="https://github.com/highlightjs/highlight.js">highlight.js</a></p><p>针对Web程序所做的高亮显示上色。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day10_1.gif" alt=""></p><h2 id="jquery-loading"><a href="#jquery-loading" class="headerlink" title="jquery-loading"></a>jquery-loading</h2><p>官网：<a href="https://carlosbonetti.github.io/jquery-loading/">jquery-loading</a></p><p>起源于为了在读取或运行中，锁住特定对象，并同时保持让浏览者可以操作页面的其他部分。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day11_1.gif" alt=""></p><h2 id="jquery-validation"><a href="#jquery-validation" class="headerlink" title="jquery-validation"></a>jquery-validation</h2><p>官网：<a href="https://jqueryvalidation.org/">jQuery Validation</a><br>Github：<a href="https://github.com/jquery-validation/jquery-validation">jquery-validation</a></p><p>jQuery Validation插件让用户端检查表单变得更容易，并提供大量的定制化设定，无论导入新开发或是现有的项目都是很好的选择。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day12_1.gif" alt=""></p><h2 id="Moment-js"><a href="#Moment-js" class="headerlink" title="Moment.js"></a>Moment.js</h2><p>官网：<a href="https://momentjs.com/">Moment.js</a></p><p>轻量级专门解析、验证、操作、格式化日期的JavaScript函数库，Moment.js是为浏览器和Node.js而设计，所有组件都可以在这两个环境下运行。</p><h2 id="Animate-css"><a href="#Animate-css" class="headerlink" title="Animate.css"></a>Animate.css</h2><p>官网：<a href="https://daneden.github.io/animate.css/">Animate.css</a></p><p>纯CSS，无需JavaScript，支持多浏览器的动画特效，即插即用。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day14_1.gif" alt=""></p><h2 id="Ace"><a href="#Ace" class="headerlink" title="Ace"></a>Ace</h2><p>官网：<a href="https://ace.c9.io/">Ace</a></p><p>Ace是透过JavaScript所开发的线上程序语言编辑器插件，无论功能和性能都类似一般编辑器（Sublime、Vim和TextMate等），导入进任何网页或JavaScript应用程序都相当容易。值得一提的是Ace是由Cloud9 IDE的团队维护，并且是Mozilla Skywriter（Bespin）项目的延伸品，品质值得信赖。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day15_1.gif" alt=""></p><h2 id="PDF-js-js"><a href="#PDF-js-js" class="headerlink" title="PDF.js.js"></a>PDF.js.js</h2><p>官网：<a href="https://mozilla.github.io/pdf.js/">PDF.js</a></p><p>PDF.js是一个由HTML构建的PDF阅读器，由Mozilla Labs所推广，目标是建立一个通用的PDF平台。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day16_1.gif" alt=""></p><h2 id="reveal-js-网页变简报"><a href="#reveal-js-网页变简报" class="headerlink" title="reveal.js-网页变简报"></a>reveal.js-网页变简报</h2><p>官网：<a href="https://revealjs.com/#/">REVEAL.JS</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day17_1.gif" alt=""></p><h2 id="Intro-js-网站导航"><a href="#Intro-js-网站导航" class="headerlink" title="Intro.js-网站导航"></a>Intro.js-网站导航</h2><p>官网：<a href="https://introjs.com/">Intro.js</a></p><p>优化网站的导航功能，提供步骤指南给浏览者，强化网站的用户体验。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day18_1.gif" alt=""></p><h2 id="Fine-Uploader-拖拽上传"><a href="#Fine-Uploader-拖拽上传" class="headerlink" title="Fine Uploader-拖拽上传"></a>Fine Uploader-拖拽上传</h2><p>官网：<a href="https://fineuploader.com/">fine-uploader</a><br>Github：<a href="https://github.com/FineUploader/fine-uploader">fine-uploader</a></p><p>导入拖拽上传档案，跨浏览器、原生JavaScript又加上免费开源，只要载入JavaScript就可以开始运行，不依赖其他程序。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day19_1.gif" alt=""></p><h2 id="parallax-js"><a href="#parallax-js" class="headerlink" title="parallax.js"></a>parallax.js</h2><p>官网：<a href="http://matthew.wagerfield.com/parallax/">parallax.js</a><br>Github：<a href="https://github.com/wagerfield/parallax">wagerfield/parallax</a></p><p>对任何设备，兼容性高的视差引擎。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day20_1.gif" alt=""></p><h2 id="Hover-css"><a href="#Hover-css" class="headerlink" title="Hover.css"></a>Hover.css</h2><p>官网：<a href="https://ianlunn.github.io/Hover/">Hover.css</a><br>Github：<a href="https://github.com/IanLunn/Hover/">IanLunn/Hover</a></p><p>多项针对链接、按钮、Logo、SVG和图片的移入CSS3特效。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day21_1.gif" alt=""></p><h2 id="iscroll"><a href="#iscroll" class="headerlink" title="iscroll"></a>iscroll</h2><p>Github：<a href="https://github.com/cubiq/iscroll">cubiq/iscroll</a></p><p>iScroll是一款高性能、文件小、无依赖且多平台的JavaScript拖拽滑动库。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day22_1.gif" alt=""></p><h2 id="Toolbar-js"><a href="#Toolbar-js" class="headerlink" title="Toolbar.js"></a>Toolbar.js</h2><p>官网：<a href="https://paulkinzett.github.io/toolbar/">Toolbar.Js</a><br>Github：<a href="https://github.com/paulkinzett/toolbar">paulkinzett/toolbar</a></p><p>一个产生工具列的jQuery插件。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day23_1.gif" alt=""></p><h2 id="nanoScroller-js"><a href="#nanoScroller-js" class="headerlink" title="nanoScroller.js"></a>nanoScroller.js</h2><p>Github：<a href="https://github.com/jamesflorentino/nanoScrollerJS">nanoScrollerJS</a></p><p>nanoScroller.js是一个用简单方法做出类似Mac OS X风格卷轴的jQuery插件，尽管目前没有在持续维护，但使用上相当简单且支持度高仍然是不错的选择。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day24_1.gif" alt=""></p><h2 id="iCheck"><a href="#iCheck" class="headerlink" title="iCheck"></a>iCheck</h2><p>官网：<a href="http://icheck.fronteed.com/">iCheck</a><br>Github：<a href="https://github.com/fronteed/iCheck">icheck</a></p><p>专为jQuery和Zepto做的高弹性定制化<code>checkbox</code>和<code>radio</code>按钮的插件。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day25_1.gif" alt=""></p><h2 id="KUTE-js"><a href="#KUTE-js" class="headerlink" title="KUTE.js"></a>KUTE.js</h2><p>官网：<a href="https://thednp.github.io/kute.js/">KUTE.js</a><br>Github：<a href="https://github.com/thednp/kute.js">kute.js</a></p><p>一个成熟的原生的JavaScript动画引擎，提供给网站开发者、设计师、动画师相当多基本的功能，浅显易懂的操作方式，跨浏览器动画，拥有着高质量、灵活、专业且轻量（主要核心只需要17K）。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day26_1.gif" alt=""></p><h2 id="Timeline-js"><a href="#Timeline-js" class="headerlink" title="Timeline.js"></a>Timeline.js</h2><p>官网：<a href="https://ilkeryilmaz.github.io/timelinejs/">Timeline.js</a></p><p>jQuery时间轴插件，使用简单是它的优点。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day27_1.gif" alt=""></p><h2 id="Muuri-js"><a href="#Muuri-js" class="headerlink" title="Muuri.js"></a>Muuri.js</h2><p>官网：<a href="https://haltu.github.io/muuri/">Muuri</a></p><p>Muuri是一个JavaScript Layout引擎，让你可以构建多样化的Layout，并具有响应式、可排序、可过滤、拖拽移动或动画效果。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day28_1.gif" alt=""></p><h2 id="Algolia-Places"><a href="#Algolia-Places" class="headerlink" title="Algolia Places"></a>Algolia Places</h2><p>官网：<a href="https://community.algolia.com/places/">Algolia Places</a></p><p>Algolia Places为您的网站提供一个快速、简单的方式，自动化产生地址建议列表的JavaScript函数库。</p><h2 id="lightgallery-js"><a href="#lightgallery-js" class="headerlink" title="lightgallery.js"></a>lightgallery.js</h2><p>官网：<a href="https://sachinchoolur.github.io/lightgallery.js/">lightgallery.js</a><br>Github：<a href="https://github.com/sachinchoolur/lightGallery">lightGallery</a></p><p>一个弹性高、组件化且响应式的灯箱jQuery插件。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day30_1.gif" alt=""></p><h2 id="Tabslet"><a href="#Tabslet" class="headerlink" title="Tabslet"></a>Tabslet</h2><p>官网：<a href="https://vdw.github.io/Tabslet/">Tabslet</a><br>Github：<a href="https://github.com/vdw/Tabslet">Tabslet</a></p><p>一个用于页签的jQuery插件，轻量级且操作容易。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day31_1.gif" alt=""></p><h2 id="Masonry-js"><a href="#Masonry-js" class="headerlink" title="Masonry.js"></a>Masonry.js</h2><p>官网：<a href="https://masonry.desandro.com/">Masonry</a></p><p>Masonry常用于瀑布流布局的插件。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day32_1.gif" alt=""></p><h2 id="Slidebars"><a href="#Slidebars" class="headerlink" title="Slidebars"></a>Slidebars</h2><p>官网：<a href="https://www.adchsm.com/slidebars/">Slidebars</a><br>Github：<a href="https://github.com/adchsm/Slidebars">Slidebars</a></p><p>Slidebars是一个jQuery框架，提供网站或网站应用程序侧边栏选单。</p><h2 id="three-js"><a href="#three-js" class="headerlink" title="three.js"></a>three.js</h2><p>官网：<a href="https://threejs.org/">three.js</a><br>Github：<a href="https://github.com/mrdoob/three.js">three.js</a></p><p>易于使用且轻量级3D函数库，提供<code>canvas</code>、<code>SVG</code>、<code>CSS3 3D</code>和<code>WebGL</code>渲染器。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day34_1.gif" alt=""></p><h2 id="Videos-js-HTML5视频播放器"><a href="#Videos-js-HTML5视频播放器" class="headerlink" title="Videos.js-HTML5视频播放器"></a>Videos.js-HTML5视频播放器</h2><p>官网：<a href="https://videojs.com/">Video.js: The Player Framework</a><br>Github：<a href="https://github.com/videojs/video.js">video.js</a></p><p>Video.js是随着HTML5的来袭所打造的媒体播放器，支持HTML5和Flash视频，支持PC和移动设备。这个项目从2010年开始，现在已经有超过40万的网站使用它。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day35_1.gif" alt=""></p><h2 id="Leaflet-js"><a href="#Leaflet-js" class="headerlink" title="Leaflet.js"></a>Leaflet.js</h2><p>官网：<a href="https://leafletjs.com/">Leaflet</a><br>Github：<a href="https://github.com/Leaflet/Leaflet">Leaflet</a></p><p>Leaflet是一个对移动设备友善的互动地图并且开源的JavaScript函数库，总大小只有38KB，却有着大多数开发人员想要的需要。简单、专业、实用并且跨平台可以有效率地在PC和移动设备上，并且有大量的插件可以扩展，有着华丽却简单使用的API，很易学且阅读性高的源码。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day36_1.gif" alt=""></p><h2 id="Sortable"><a href="#Sortable" class="headerlink" title="Sortable"></a>Sortable</h2><p>官网：<a href="https://sortablejs.github.io/Sortable/">SortableJS</a></p><p>Sortable可以对HTML对象做拖拽移动清单的JavaScript函数库，支持移动设备且不依赖jQuery等其他第三方，并兼容Bootstrap等CSS框架。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day37_1.gif" alt=""></p><h2 id="clipboard-js"><a href="#clipboard-js" class="headerlink" title="clipboard.js"></a>clipboard.js</h2><p>官网：<a href="https://clipboardjs.com/">clipboard.js</a><br>Github：<a href="https://github.com/zenorocha/clipboard.js">clipboard.js</a></p><p>复制内容到剪切板的小工具，不依赖Flash，大小只要3KB。</p><h2 id="howler-js"><a href="#howler-js" class="headerlink" title="howler.js"></a>howler.js</h2><p>官网：<a href="https://howlerjs.com/">howler.js</a></p><p>howler.js是针对当下网站的一个音频播放函数库，预设为Web Audio API和HTML5 Audio，可以透过JavaScript播放声音变得更简单，并且跨平台。</p><h2 id="p5-js-绘画插件"><a href="#p5-js-绘画插件" class="headerlink" title="p5.js-绘画插件"></a>p5.js-绘画插件</h2><p>官网：<a href="https://p5js.org/zh-Hans/">p5.js</a><br>Github：<a href="https://github.com/processing/p5.js">processing/p5.js</a></p><p>p5.js是一个JavaScript函数库，有完整的绘画功能，并不局限在画布上，你可以把整个浏览器当做你的草稿，另外有插件可以让你更容易去做HTML5互动，加入文字栏、影片、视频或音频等功能。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day40_1.gif" alt=""></p><h2 id="fullPage-js-全页式导航"><a href="#fullPage-js-全页式导航" class="headerlink" title="fullPage.js-全页式导航"></a>fullPage.js-全页式导航</h2><p>官网：<a href="https://alvarotrigo.com/fullPage/zh/">fullPage.js</a><br>Github：<a href="https://github.com/alvarotrigo/fullPage.js">fullPage.js</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day41_1.gif" alt=""></p><h2 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h2><p>Github：<a href="https://github.com/marcuswestin/store.js">store.js</a></p><p>针对任何项目都可以做的跨浏览器的数据存取，全站都可以运行，浏览器支持度高，小项目不想导入大型框架的不错选择。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day42_1.gif" alt=""></p><h2 id="fullcalendar"><a href="#fullcalendar" class="headerlink" title="fullcalendar"></a>fullcalendar</h2><p>官网：<a href="https://fullcalendar.io/">JavaScript Calendar</a><br>Github：<a href="https://github.com/fullcalendar/fullcalendar">fullcalendar</a></p><p>设计一个满版且可拖拽事件的行程日历。Bootstrap的排版风格，可读入JSON格式数据，安装容易、支持响应式排版。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day43_1.gif" alt=""></p><h2 id="Headroom-js"><a href="#Headroom-js" class="headerlink" title="Headroom.js"></a>Headroom.js</h2><p>官网：<a href="http://wicky.nillia.ms/headroom.js/">Headroom.js</a></p><p>把网站空间发挥到极限，不需要导航列表是隐藏，需要时出现。搭配Animation.css可以让画面更活泼，另外也支持jQuery或Angular。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day44_1.gif" alt=""></p><h2 id="ScrollToFixed"><a href="#ScrollToFixed" class="headerlink" title="ScrollToFixed"></a>ScrollToFixed</h2><p>官网：<a href="https://bigspotteddog.github.io/ScrollToFixed/">ScrollToFixed</a></p><p>ScrollToFixed能够让网页的导航或表头等固定在顶部或底部，用户更方便的操作或查看信息。除了导航和表头，也可以固定其他内容，比如广告、返回顶部等。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day45_1.gif" alt=""></p><h2 id="Handlebars-js"><a href="#Handlebars-js" class="headerlink" title="Handlebars.js"></a>Handlebars.js</h2><p>官网：<a href="http://handlebarsjs.com/">Handlebars.js</a><br>Github：<a href="https://github.com/wycats/handlebars.js">handlebars.js</a></p><p>Handlebars主要是让你在做语义化模板时更有效率、且不容易受挫，并且兼容Mustache模板，大多数可以直接互换使用。</p><h2 id="faker-js"><a href="#faker-js" class="headerlink" title="faker.js"></a>faker.js</h2><p>Github：<a href="https://github.com/Marak/Faker.js">faker.js</a></p><p>faker.js可以在浏览器或Node.js产生大量的假数据。测试时期相当方便的东西，也可以透过Google Extension来运行。</p><h2 id="TinyMCE-HTML编辑器"><a href="#TinyMCE-HTML编辑器" class="headerlink" title="TinyMCE-HTML编辑器"></a>TinyMCE-HTML编辑器</h2><p>官网：<a href="https://www.tiny.cloud/">TinyMCE</a><br>Github：<a href="https://github.com/tinymce/tinymce">tinymce</a></p><p>TinyMCE是功能齐全且轻量级的HTML编辑器，但需要在IE11以上才可以运行。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day48_1.gif" alt=""></p><h2 id="List-js-资料排序"><a href="#List-js-资料排序" class="headerlink" title="List.js-资料排序"></a>List.js-资料排序</h2><p>官网：<a href="https://listjs.com/">List.js</a><br>Github：<a href="https://github.com/javve/list.js">list.js</a></p><p>List.js对表格、清单、各式各样的对象，增加搜索、排序、过滤和灵活性，无形地建立在HTML内，极简易也易于使用。即便周边不如DataTables，但不依赖jQuery及大小仅Datatables的1/4（压缩后17KB），以及对IE的高兼容性和不止对<code>&lt;table&gt;</code>，对<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>或是其他HTML元素的支持，都是<code>List.js</code>不容忽视的优势之一。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day49_1.gif" alt=""></p><h2 id="Swiper"><a href="#Swiper" class="headerlink" title="Swiper"></a>Swiper</h2><p>官网：Swiper<br>Github：Swiper</p><p>Swiper是当下王铮的幻灯片/跑马灯插件，使用效能高，并可运用在移动设备上及混合式App上，不但在最新版本的IOS上运行良好，在Android、Windows Phone 8和PC设备上一样表现优秀。要注意的是，Swiper并不兼容所有平台设备，而是专注于当下主流平台设备的兼容性和效能上。同时Swiper也是<a href="http://www.framework7.cn/">Framework7</a>和<a href="https://ionicframework.com/">Ionic Framework</a>的组件的一部分。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day50_2.gif" alt=""></p><h2 id="toastr"><a href="#toastr" class="headerlink" title="toastr"></a>toastr</h2><p>官网：<a href="https://codeseven.github.io/toastr/">Toastr</a></p><p>toastr是一个提示信息JavaScript函数库，必须载入jQuery，宗旨是利用简单的程序函数库来做定制化跟扩展。toastr提供一个范例页面<a href="https://codeseven.github.io/toastr/demo.html">toastr examples</a>，方便自订效果跟产生源码，类似<a href="https://getbootstrap.com/docs/3.4/customize/">Customize and download · Bootstrap</a>的效果，方便使用者加快流程，先前介绍的<a href="https://alertifyjs.com/">ALERTIFY JS</a>整体层面比toastr好很多，无论原生JavaScript以及整体文件大小和功能延展性，但toastr简单使用的操作模式，如果有旧项目是在jQuery的环境下，要做一些定制化功能，或许就是不错的选择。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day51_1.gif" alt=""></p><h2 id="goodshare-js-极简动画绘制"><a href="#goodshare-js-极简动画绘制" class="headerlink" title="goodshare.js-极简动画绘制"></a>goodshare.js-极简动画绘制</h2><p>官网：<a href="https://soulwire.github.io/sketch.js/">Sketch.js</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day53_1.gif" alt=""></p><h2 id="Quill"><a href="#Quill" class="headerlink" title="Quill"></a>Quill</h2><p>官网：<a href="https://quilljs.com/">Quill</a><br>Github：<a href="https://github.com/quilljs/quill">Quill</a></p><p>Quill是当下高兼容性、强大、丰富且具有扩展性的文字编辑器。对于移动设备的支持度高。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day54_1.gif" alt=""></p><h2 id="Shave-截断文字"><a href="#Shave-截断文字" class="headerlink" title="Shave-截断文字"></a>Shave-截断文字</h2><p>官网：<a href="https://dollarshaveclub.github.io/shave/">Shave</a></p><p>Shave根据内容的最大高度将文字截断，是一个没有任何依赖性的JavaScript插件。并将多出的文字藏在<code>span</code>后面，保留原文的完整性。CSS本身通过<code>text-overflow</code>也有类似的功能（<a href="https://css-tricks.com/snippets/css/truncate-string-with-ellipsis/">Truncate String with Ellipsis</a>），但需要设定宽度，如果需要不能固定宽度的项目，Shave应该是一个不错的选择。</p><h2 id="Tabulator"><a href="#Tabulator" class="headerlink" title="Tabulator"></a>Tabulator</h2><p>官网：<a href="http://tabulator.info/">Tabulator</a></p><p>Tabulator是相当容易操作的表格内容产生器，只需要花很少的时间就可以通过把数组或JSON格式的资料生成HTML界面的表格。并且支持响应式网页，以及运用其他插件做成对象产生资料图表。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day56_1.gif" alt=""></p><h2 id="ScrollReveal-动态显示内容"><a href="#ScrollReveal-动态显示内容" class="headerlink" title="ScrollReveal-动态显示内容"></a>ScrollReveal-动态显示内容</h2><p>官网：<a href="https://scrollrevealjs.org/">ScrollReveal</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day57_1.gif" alt=""></p><h2 id="datedropper"><a href="#datedropper" class="headerlink" title="datedropper"></a>datedropper</h2><p>官网：<a href="https://felicegattuso.com/datedropper/">datedropper</a><br>Github：<a href="https://github.com/felicegattuso/datedropper">datedropper</a></p><p>datedropper是微型但功能强大的jQuery时间选择器。内建风格相当活泼可爱，可增加网站的活力。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day58_1.gif" alt=""></p><h2 id="Cleave-js-表单栏位格式化工具"><a href="#Cleave-js-表单栏位格式化工具" class="headerlink" title="Cleave.js-表单栏位格式化工具"></a>Cleave.js-表单栏位格式化工具</h2><p>官网：<a href="https://nosir.github.io/cleave.js/">Cleave.js</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day59_1.gif" alt=""></p><h2 id="Infinite-Scroll"><a href="#Infinite-Scroll" class="headerlink" title="Infinite Scroll"></a>Infinite Scroll</h2><p>官网：<a href="https://infinite-scroll.com/">Infinite Scroll</a></p><p>Infinite Scroll是jQuery一个用来实现无限滚动的插件。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day60_1.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端插件库&quot;&gt;&lt;a href=&quot;#前端插件库&quot; class=&quot;headerlink&quot; title=&quot;前端插件库&quot;&gt;&lt;/a&gt;前端插件库&lt;/h1&gt;&lt;h2 id=&quot;DataTables&quot;&gt;&lt;a href=&quot;#DataTables&quot; class=&quot;headerlink&quot; title=&quot;DataTables&quot;&gt;&lt;/a&gt;DataTables&lt;/h2&gt;&lt;p&gt;官网：&lt;a href=&quot;https://www.datatables.net/&quot;&gt;https://www.datatables.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DataTables是jQuery的JavaScript函数库，目的是强化表格操作（如搜索、排序），并自动加入组件引入表格中，使用非常灵活简便。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="插件" scheme="https://whjin.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>CSS的Transition与Animation</title>
    <link href="https://whjin.github.io/2019/05/08/technical/CSS%E7%9A%84Transition%E4%B8%8EAnimation/"/>
    <id>https://whjin.github.io/2019/05/08/technical/CSS的Transition与Animation/</id>
    <published>2019-05-08T09:40:49.000Z</published>
    <updated>2023-01-27T07:13:18.788Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文总结CSS3中两个用来做动画的属性，一个是<code>transition</code>，另一个是<code>animation</code>。</p></blockquote><span id="more"></span><h1 id="差异比较"><a href="#差异比较" class="headerlink" title="差异比较"></a>差异比较</h1><table><thead><tr><th>CSS3</th><th>差异</th></tr></thead><tbody><tr><td><code>transition</code></td><td>在给定的持续时间内平滑地更改属性值（从一个值到另一个值），也就是只需要指定开始与结束的参数，参数改变时就触发动画。</td></tr><tr><td></td><td>常用语鼠标事件（<code>:hover</code>、<code>active</code>、<code>:focus</code>、<code>:click</code>）或键盘输入时触发</td></tr><tr><td></td><td>需要事件触发，无法在网页加载时自动发生。一次性，不能重复发生，除非一再触发。</td></tr><tr><td></td><td>只能定义开始状态和结束状态，不能定义中间状态。</td></tr><tr><td><code>animation</code></td><td>可以自行写动画开始、进行间、结束时各阶段的变化，适合用来做较细微的动画表现。需要明确的指定关键帧（<code>@keyframe</code>）的参数。</td></tr><tr><td></td><td>网页加载时会直接执行，可以自行控制各阶段动画的变化</td></tr></tbody></table><blockquote><p><code>animation</code>和<code>transition</code>最大的不同在于<code>transition</code>是当参数改变时触发，而<code>animation</code>则是直接就执行，所有动画效果需要明确的指定关键帧的参数。</p></blockquote><table><thead><tr><th>CSS3</th><th>简写顺序</th></tr></thead><tbody><tr><td><code>transition</code></td><td>[<code>property</code>名称][<code>duration</code>时间][<code>timing-function</code>特效][<code>delay</code>延迟]</td></tr><tr><td><code>animation</code></td><td>[<code>name</code>名称][<code>duration</code>时间][<code>timing-function</code>特效][<code>delay</code>延迟]</td></tr><tr><td></td><td>[<code>iteration-count</code>次数][<code>direction</code>方向][<code>fill-mode</code>填充模式][<code>play-state</code>播放状态]</td></tr></tbody></table><h1 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h1><h2 id="transition写法"><a href="#transition写法" class="headerlink" title="transition写法"></a>transition写法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: purple;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">2s</span> ease-in <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="animation写法"><a href="#animation写法" class="headerlink" title="animation写法"></a>animation写法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">animation</span>: change <span class="number">5s</span>; <span class="comment">/*8个属性中至少要有名称、时间*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设定开始与结束状态*/</span></span><br><span class="line"><span class="comment">/*from 就是0%，to 就是100%*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> change &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4BC0C8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#C779D0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">animation</span>: change <span class="number">5s</span>; <span class="comment">/*8个属性中至少要有名称、时间*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设定开始与结束状态*/</span></span><br><span class="line"><span class="comment">/*from 就是0%，to 就是100%*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> change &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4BC0C8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#C779D0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">60%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FEAC5E</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">80%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#185a9d</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4BC0C8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td><code>animation-name</code></td><td><code>@keyframes</code>后的名称</td></tr><tr><td><code>animation-duration</code>时间</td><td><code>time</code>以秒计算，如<code>3s initial</code>预设值<code>inherit</code>继承父层</td></tr><tr><td><code>animation-timing-function</code>特效</td><td><code>linear</code>等速、<code>ease</code>、<code>ease-in</code>、<code>ease-out</code>、<code>ease-in-out</code>、<code>step-start</code>、<code>step-end</code>、<code>steps(int,start/end)</code>、<code>cubic-bezier(n,n,n,n)</code><a href="https://cubic-bezier.com/#.17,.67,.83,.67">可上官网取值使用</a></td></tr><tr><td><code>animation-delay</code></td><td>以秒计算，如<code>2s</code></td></tr><tr><td><code>animation-iteration-count</code>次数</td><td><code>number</code>预设值为<code>1</code>，因此填<code>2</code>时，动画跑的次数为<code>1+2=3</code>次<code>infinite</code>无限循环</td></tr><tr><td><code>animation-direction</code>方向</td><td><code>normal</code>、<code>reverse</code>反向、<code>alternate</code>先反后正</td></tr><tr><td><code>animation-fill-mode</code></td><td><code>forwards</code>使用关键帧最后的值<code>backwards</code>使用最开始的值<code>both</code></td></tr><tr><td><code>animation-play-state</code>播放状态</td><td><code>pause</code>暂停<code>running</code>为预设值<code>initial</code>预设值、<code>inherit</code>继承父层</td></tr></tbody></table><blockquote><p>GitHub：<a href="https://github.com/daneden/animate.css">Animate.css 使用说明</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文总结CSS3中两个用来做动画的属性，一个是&lt;code&gt;transition&lt;/code&gt;，另一个是&lt;code&gt;animation&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="https://whjin.github.io/tags/CSS/"/>
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>jQuery选择器</title>
    <link href="https://whjin.github.io/2019/05/08/technical/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://whjin.github.io/2019/05/08/technical/jQuery选择器/</id>
    <published>2019-05-08T08:17:24.000Z</published>
    <updated>2023-01-27T07:12:28.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本选择器-Basics"><a href="#基本选择器-Basics" class="headerlink" title="基本选择器 Basics"></a>基本选择器 Basics</h1><ul><li><code>*</code>选择所有元素</li><li><code>.class</code>选择<code>class</code>，如：<code>$(&#39;.mybox&#39;)</code></li><li><code>element</code>选择<code>element</code>，如：<code>$(&#39;p&#39;)</code></li><li><code>#id</code>选择<code>id</code>，如：<code>$(&#39;#box&#39;)</code></li><li><code>selector1,selectorN</code>可以同时选择多个元素，如：<code>$(&#39;div, p.box, #phone&#39;)</code></li></ul><span id="more"></span><h1 id="层级选择器-Hierarchy"><a href="#层级选择器-Hierarchy" class="headerlink" title="层级选择器 Hierarchy"></a>层级选择器 Hierarchy</h1><ul><li><code>parent &gt; child</code>选择指定元素下的指定子元素，如：<code>$(&#39;ul.tonav &gt; li&#39;)</code></li><li><code>ancestor descendant</code>选择一个元素里所有的后代元素，如：<code>$(&#39;form input&#39;)</code></li><li><code>prev + next</code>选择所有指定元素后紧跟着的元素，如：<code>$(&#39;label + input&#39;)</code></li><li><code>prev ~ siblings</code>选择与指定元素之后有相同父级的同级选择器，如：<code>$(&#39;#prev ~ div&#39;)</code></li></ul><h1 id="基本过滤器-Basic-Filters"><a href="#基本过滤器-Basic-Filters" class="headerlink" title="基本过滤器 Basic Filters"></a>基本过滤器 Basic Filters</h1><ul><li><code>:animated</code>选择动画进行中的所有元素。如：<code>$(&#39;div:animated)</code></li><li><code>:eq(n)</code>选取第<code>n</code>个元素，如：<code>$(&#39;ul.tonav li:eq(n)&#39;)</code></li><li><code>:even</code>选取偶数个元素，如：<code>$(&#39;li:even&#39;)</code></li><li><code>:odd</code>选取奇数个元素，如：<code>$(&#39;li.odd&#39;)</code></li><li><code>:first</code>选取奇数个元素，如：<code>$(&#39;li:first&#39;)</code></li><li><code>:gt(n)</code>选取结果集中索引大于<code>n</code>的元素，<code>n</code>可以为负值，如：<code>$(&#39;:gt(3)&#39;)</code></li><li><code>:lt(n)</code>选取结果集中索引小于<code>n</code>的元素，<code>n</code>可以为负值，如：<code>$(&#39;:lt(3)&#39;)</code></li><li><code>:header</code>选取所有的标题元素，例如<code>h1</code>、<code>h2</code>、<code>h3</code>…，如：<code>$(&#39;:header&#39;)</code></li><li><code>:lang()</code>选取指定语言的所有元素，，如：<code>$(&#39;div:lang(zh-cn)&#39;)</code></li><li><code>:last</code>选取最后一个符合的元素，如：<code>$(&#39;li:last&#39;)</code></li><li><code>:not</code>选取不符合的所有元素，如：<code>$(&#39;input:not(:checked) + span&#39;)</code></li><li><code>:root</code>选取作为文档根目录的元素</li><li><code>:target</code>选取由文档的图片、视频、音频指示的目标元素</li></ul><h1 id="内容过滤器-Content-Filters"><a href="#内容过滤器-Content-Filters" class="headerlink" title="内容过滤器 Content Filters"></a>内容过滤器 Content Filters</h1><ul><li><code>:contains()</code>选择包含指定文本的所有元素，如：<code>$(&quot;div:containers(&#39;home&#39;)&quot;)</code></li><li><code>:empty</code>选择没有子元素或内容文字的元素，如：<code>$(&quot;td:empty&quot;))</code></li><li><code>:has()</code>选择包含至少一个匹配指定选择器的元素的元素，如：<code>$(&quot;div:has(p)&quot;))</code></li><li><code>:parent</code>选择至少有一个子节点（元素或文本）的所有元素</li></ul><h1 id="可视选择器-Visibility-Filters"><a href="#可视选择器-Visibility-Filters" class="headerlink" title="可视选择器 Visibility Filters"></a>可视选择器 Visibility Filters</h1><ul><li><code>:hidden</code>选择所有隐藏的元素，如：<code>$(&quot;div:hidden&quot;).show(3000));</code></li><li><code>:visible</code>选择所有隐藏的元素，如：<br>  <code>$(&quot;div:visible&quot;).click(function() &#123;$(this).css(&quot;background&quot;, &quot;yellow&quot;);&#125;);</code></li></ul><h1 id="属性选择器-Attribute"><a href="#属性选择器-Attribute" class="headerlink" title="属性选择器 Attribute"></a>属性选择器 Attribute</h1><ul><li><code>[name]</code>选择具有指定属性的元素（使用任何值都可以）。如：<code>$(&quot;div[id]&quot;)</code></li><li><p><code>[name|=&quot;value&quot;]</code>选择具有指定属性的元素，其值等于给定的字符串，或者以该字符串开头，后跟连字符（<code>-</code>）。</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;a[href=&quot;about.html&quot;]&#x27;</span>);  <span class="comment">//选择 a 链接的 href 属性包含 &#x27;about.html&#x27; 的元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>[name*=&quot;value&quot;]</code>选择具有包含给定子字符串的值得指定属性的元素。</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;input[name*=&quot;man&quot;]&#x27;</span>);  <span class="comment">//选择所有的 name 属性包含 &#x27;man&#x27; 的 input 元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>[name~=&quot;value&quot;]</code>选择具有指定属性的元素，其中包含由空格分隔的给定单词的值。</p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;man-news&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;milk man&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;letter&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;input[name~=&quot;man&quot;]&#x27;</span>);  <span class="comment">//会选择到前两个 input 元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>[name$=&quot;value&quot;]</code>选择具有指定属性的元素，其值与给定字符串精确匹配，要区分大小写。如：<code>$(&quot;input[name$=&#39;letter&#39;]&quot;)</code></p></li><li><code>[name=&quot;value&quot;]</code>选择具有指定属性的元素，其值恰好等于特定值，如：<code>$(&quot;input[value=&#39;Hot Fuzz&#39;]&quot;)</code>会选到<code>value</code>等于<code>Hot Fuzz</code>的<code>input</code></li><li><code>[name!=&quot;value&quot;]</code>选择不具有指定属性的元素，或者具有指定苏醒但不具有特定值的元素。如：<code>$(&quot;input[name!=&#39;newsletter&#39;]&quot;)</code>，<code>name</code>属性值为<code>newsletter</code>的不选。</li><li><p><code>[name^=&quot;value&quot;]</code>选择具有指定属性的元素，其值与给定字符串完全一致。</p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;newsletter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;milkman&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;input[name^=&quot;news&quot;]&#x27;</span>);  <span class="comment">//会选择到第三个 input</span></span><br></pre></td></tr></table></figure></li><li><p><code>[name=&quot;value&quot;][name2=&quot;value2&quot;]</code>符合所有指定的属性过滤器的元素。如：<code>$(&quot;input[id][name$=&#39;man&#39;]&quot;)</code></p></li></ul><h1 id="子代过滤器-Child-Filters"><a href="#子代过滤器-Child-Filters" class="headerlink" title="子代过滤器 Child Filters"></a>子代过滤器 Child Filters</h1><ul><li><code>:first-child</code>选择同父代的第一个子代元素。</li><li><code>:first-of-type</code>选择同一元素名称的兄弟中的第一个元素。</li><li><code>:last-child</code>选择同父代的最后一个子代元素。</li><li><code>:last-of-type</code>选择同一元素名称的兄弟中的最后一个元素。</li><li><code>:nth-child()</code>选择同父代的第<code>n</code>个子代元素。</li><li><code>:nth-last-child()</code>选择同父代的倒数第<code>n</code>个子代元素。</li><li><code>:nth-last-of-type()</code>选择同父代的倒数第<code>n</code>个子代元素。</li><li><code>:nth-of-type()</code>选择同父代的第<code>n</code>个子代元素。</li><li><code>:only-child</code>选择只有一个子代的元素。</li><li><code>:only-of-type()</code>选择所有没有同名元素的兄弟元素。如：<code>$(&quot;div.button:only-child&quot;)</code>选择只有一个<code>button</code>的<code>div</code></li></ul><h1 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h1><ul><li><code>:button</code>选择所有按钮元素和按钮类型的元素。</li><li><code>:checkbox</code>选择所有得可取块的元素。</li><li><code>:checked</code>选择所有选中的元素。</li><li><code>:disabled</code>选择所有被禁用的元素。</li><li><code>:enabled</code>选择所有已启用的元素。</li><li><code>:focus</code>选择当下被<code>focus</code>的元素。</li><li><code>:file</code>选择<code>file</code>类型的元素。</li><li><code>:image</code>选择图像类型的所有的元素。</li><li><code>:input</code>选择所有<code>input</code>、<code>textarea</code>、<code>select</code>和<code>button</code>元素。</li><li><code>:password</code>选择所有密码类型的元素。</li><li><code>:radio</code>选择所有选项按钮的元素。</li><li><code>:reset</code>选择所有清除按钮（复位按钮）的元素。</li><li><code>:selected</code>选择所有选中的元素。</li><li><code>:submit</code>选择所有提交类型的元素。</li><li><code>:text</code>选择所有文本输入框的元素。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本选择器-Basics&quot;&gt;&lt;a href=&quot;#基本选择器-Basics&quot; class=&quot;headerlink&quot; title=&quot;基本选择器 Basics&quot;&gt;&lt;/a&gt;基本选择器 Basics&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;选择所有元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.class&lt;/code&gt;选择&lt;code&gt;class&lt;/code&gt;，如：&lt;code&gt;$(&amp;#39;.mybox&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element&lt;/code&gt;选择&lt;code&gt;element&lt;/code&gt;，如：&lt;code&gt;$(&amp;#39;p&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#id&lt;/code&gt;选择&lt;code&gt;id&lt;/code&gt;，如：&lt;code&gt;$(&amp;#39;#box&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selector1,selectorN&lt;/code&gt;可以同时选择多个元素，如：&lt;code&gt;$(&amp;#39;div, p.box, #phone&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="jQuery" scheme="https://whjin.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>前端优化</title>
    <link href="https://whjin.github.io/2019/05/07/technical/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    <id>https://whjin.github.io/2019/05/07/technical/前端优化/</id>
    <published>2019-05-07T03:02:02.000Z</published>
    <updated>2023-02-02T16:03:23.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h1><p>浏览器发送HTTP请求，服务器收到请求全文后，返回HTTP响应，在浏览器接收之后结束这个过程。浏览器和服务器只有一次互动的机会，浏览器主动发起，而服务器被动地根据收到的请求内容返回结果。一个完整的请求都需要经过DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据的过程。</p><span id="more"></span><h1 id="前端优化的途径"><a href="#前端优化的途径" class="headerlink" title="前端优化的途径"></a>前端优化的途径</h1><ol><li><strong>页面级别</strong>的优化，例如HTTP请求数、脚本的无阻塞加载、内联脚本的位置优化等；</li><li><strong>代码级别</strong>的优化，例如JavaScript中的DOM操作优化、CSS选择符优化、图片优化以及HTML结构优化等。</li></ol><h1 id="页面级优化"><a href="#页面级优化" class="headerlink" title="页面级优化"></a>页面级优化</h1><h2 id="1-减少HTTP请求数"><a href="#1-减少HTTP请求数" class="headerlink" title="1. 减少HTTP请求数"></a>1. 减少HTTP请求数</h2><h3 id="减少HTTP请求数的主要途径"><a href="#减少HTTP请求数的主要途径" class="headerlink" title="减少HTTP请求数的主要途径"></a>减少HTTP请求数的主要途径</h3><p>1、从设计实现层面简化页面</p><p><strong>保持页面简洁、减少资源的使用</strong>是最直接的。能使用CSS替代效果就尽量少使用图片。</p><p>2、合理设置HTTP缓存</p><p>恰当地缓存设置可以大大减少HTTP请求。被缓存资源的请求服务器是304响应，只有<code>Header</code>没有<code>body</code>，没有节省带宽。对于多个页面都可能使用到的代码，尽量拆分到同一个文件中。如果是嵌入页面换来的是增大了页面的体积，而且无法利用浏览器缓存。</p><p>3、资源合并和压缩</p><p>如果可以，尽可能将外部的脚本、样式进行合并，多个合为一个。另外，CSS、JavaScript、image都可以用相应的工具进行压缩。</p><p>4、<code>CSS Sprites</code></p><p>合并CSS图片，减少请求数的有一个好办法。</p><p>5、<code>lazy load image</code></p><p>这个策略实际上并不一定能减少HTTP请求数，但是却能在某些条件下或者页面刚加载时减少HTTP请求数。对于图片而言，在页面刚加载时可以只加载第一屏，当用户继续往后滚屏时才加载后续的图片。以前的做法是在加载时把第一屏之后的图片地址缓存在<code>textarea</code>标签中，待用户往下滚屏时才<strong>惰性</strong>加载。百度图片和花瓣网也是用这种流行的瀑布流加载图片。</p><h2 id="2-将外部脚本置底"><a href="#2-将外部脚本置底" class="headerlink" title="2. 将外部脚本置底"></a>2. 将外部脚本置底</h2><p><strong>外链脚本在加载时会阻塞其他资源</strong>，例如在脚本加载完成之前，它后面的图片、样式以及其他脚本都处于阻塞状态，直到脚本加载完成后才会开始加载。如果把脚本放在比较靠前的位置，则会影响整个页面的加载速度从而影响用户体验。最简单可依赖的方法是将脚本尽可能往后挪，减少对并发下载的影响。如果时效性允许的话，可以考虑在<code>DOMLoaded</code>事件触发时加载，或者用<code>setTimeout</code>方式来灵活控制加载的时机。</p><h2 id="3-异步执行inline脚本"><a href="#3-异步执行inline脚本" class="headerlink" title="3. 异步执行inline脚本"></a>3. 异步执行inline脚本</h2><p><code>inline</code>脚本对性能的影响比外部脚本大很多。首先，与外部脚本一样，<code>inline</code>脚本在执行时也会阻塞并发请求，除此之外，由于浏览器在页面处理方面时单线程的，当<code>inline</code>脚本在页面渲染之前执行时，页面的渲染工作则会被推迟。简而言之，<code>inline</code>脚本在执行时页面处于空白状态。</p><p>鉴于以上两点，建议将<strong>执行时间较长的<code>inline</code>脚本异步执行</strong>。异步执行的方式有很多种，例如使用<code>script</code>元素的<code>defer</code>属性、使用<code>setTimeout</code>，此外，在HTML5中引入了<code>web workers</code>的机制，恰恰可以解决此类问题。</p><h2 id="4-lazy-load-JavaScript"><a href="#4-lazy-load-JavaScript" class="headerlink" title="4. lazy load JavaScript"></a>4. lazy load JavaScript</h2><p>目前的做法大概有两种，一种是为流量特别大的页面专门定制一个专用的<code>mini</code>版框架，另一种则是<code>lazy load</code>，最初只加载核心模块，其他模块可以等到需要使用的时候才加载，类似于<code>java</code>的<code>swing</code>，引入需要的组件库文件。</p><h2 id="5-将CSS放在head中"><a href="#5-将CSS放在head中" class="headerlink" title="5. 将CSS放在head中"></a>5. 将CSS放在head中</h2><h2 id="6-减少不必要的HTTP跳转"><a href="#6-减少不必要的HTTP跳转" class="headerlink" title="6. 减少不必要的HTTP跳转"></a>6. 减少不必要的HTTP跳转</h2><p>对于以目录形式访问的HTTP链接，很多人都会忽略链接最后是否带<code>/</code>，假如服务器对此区别对待，那么其中很可能隐藏了301跳转，增加了多余请求。</p><h1 id="代码级优化"><a href="#代码级优化" class="headerlink" title="代码级优化"></a>代码级优化</h1><h2 id="1-JavaScript"><a href="#1-JavaScript" class="headerlink" title="1. JavaScript"></a>1. JavaScript</h2><p>1、<code>DOM</code></p><p>DOM操作应该是脚本中最耗性能的一类操作，例如增、删、查、改DOM元素或者对DOM集合进行操作。如果脚本中包含了大量的DOM操作则需要注意<code>html collection</code>。</p><p>在脚本中<code>document.images</code>、<code>document.forms</code>、<code>getElementsByTagName()</code>返回的都是<code>HTMLCollection</code>类型的集合，在平时使用的时候大多将它作为数组来使用，因为它有<code>length</code>属性，也可以使用索引访问每一个元素。不过在访问性能上则比数组要差很多，原因这个集合并不是一个静态的结果，它表示的仅仅是一个特定的查询，每次访问该集合时都会重新执行这个查询从而更新查询结果。所谓的<strong>访问集合</strong>包括读取集合的<code>length</code>属性、访问集合中的元素。</p><p>因此，当你需要遍历<code>HTML collection</code>时，尽量将它<strong>转为数组后再访问</strong>，以提高性能。即使不转换为数组，也请尽可能少地访问它，例如在遍历的时候可以将<code>length</code>属性、成员保存到局部变量后再使用局部变量。</p><p>2、慎用<code>with</code></p><p><code>with(obj)&#123;p=1&#125;;</code>代码块的行为实际上是修改了代码块中的执行环境，将<code>obj</code>放在了其作用于的最前端，在<code>with</code>代码块中访问非局部变量都是先从<code>obj</code>上开始查找，如果没有再依次按作用域链向上查找，因此<strong>使用<code>with</code>相当于增加了作用域链长度</strong>。而每次查找作用域链都是要消耗时间的，过长的作用域链会导致查找性能下降。</p><p>因此，除非你能<strong>肯定在<code>with</code>代码中脂肪纹<code>obj</code>中的属性</strong>，否则慎用<code>with</code>，替代的可以使用局部变量缓存需要访问的属性。</p><p>3、避免使用<code>eval</code>和<code>Function</code></p><p>每次<code>eval</code>或<code>Function</code>构造函数作用于字符串表示的源代码时，脚本引擎都需要将源代码转换为可执行代码。这是很消耗资源的操作——通常比简单的函数调用慢100倍以上。</p><p><code>eval</code>函数效率特别低，由于事先无法知晓传给<code>eval</code>的字符串中的内容，<code>eval</code>在其上下文中解析要处理的代码，也就是说编译器无法优化上下文，因此只能有浏览器在运行时解析代码，这对性能影响很大。</p><p><code>Function</code>构造函数比<code>eval</code>略好，因为使用此代码不会影响周围代码，但其速度仍很慢。</p><p>此外，使用<code>eval</code>和<code>Function</code>不利于JavaScript压缩工具执行压缩。</p><p>4、减少作用域链查找</p><p>作用域链查找问题，这一点在循环中尤其需要注意。如果在循环中需要访问非本作用域下的变量时<strong>请在遍历之前用局部变量缓存该变量，并在遍历结束后再重复那个变量</strong>，这一点对全局变量尤其重要，因为全局变量处于作用域链的最顶端，访问时的查找次数是最多的。</p><p>此外，要减少作用域链查找还应该减少闭包的使用。闭包的变量可能保存到内存中，内存消耗很大，解决方法是在退出函数前，将不使用的局部变量删除。</p><p>5、数据访问</p><p>JavaScript中的数据访问包括直接量（字符串、正则表达式）、变量、对象属性以及数组，其中对直接量和局部变量的访问是最快的，对对象属性以及数组的访问需要更大的开销。当出现以下情况时，建议将数据放入局部变量：</p><ol><li>对任何<strong>对象属性</strong>的访问超过1次</li><li>对任何<strong>数组成员</strong>的访问次数超过1次</li></ol><p>另外，还应当尽可能的<strong>减少对对象以及数组深度查找</strong>。</p><p>6、字符串拼接</p><p>在JavaScript中使用<code>+</code>号来拼接字符串效率是比较低的，因为每次运行都会开辟新的内存并生成新的字符串变量，然后拼接结果赋值给新变量。之前使用jQuery+Ajax交互页面，很多时候都是将后台传输过来的数据和前端<code>HTML</code>结构拼接成字符串，然后呈现在页面HTML容器里。</p><p>与之相比更为高效的做法是<strong>使用数组的<code>join</code>方法</strong>，即将需要拼接的字符串放在数组中最后调用其<code>join</code>方法得到结果。不过由于使用数组也有一定的开销，因此当需要拼接的字符串较多时可以考虑使用此方法。</p><h2 id="2-CSS选择符"><a href="#2-CSS选择符" class="headerlink" title="2. CSS选择符"></a>2. CSS选择符</h2><p>在大多数人的观念中，都觉得浏览器对CSS选择符的解析是从左往右进行的。</p><p>如果是从右往左解析则效率会很高，因为第一个ID选择基本上就把查找的范围限定了，但实际上浏览器对选择符的解析是从右往左进行的。<code>#tag A &#123;color: &quot;#ccc&quot;;&#125;</code>，浏览器必须遍历查找每一个<code>A</code>标签的祖先节点，效率并不像之前想象的那么高。根据浏览器的这一行为特点，在写选择符的时候需要注意很多事项。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端优化&quot;&gt;&lt;a href=&quot;#前端优化&quot; class=&quot;headerlink&quot; title=&quot;前端优化&quot;&gt;&lt;/a&gt;前端优化&lt;/h1&gt;&lt;p&gt;浏览器发送HTTP请求，服务器收到请求全文后，返回HTTP响应，在浏览器接收之后结束这个过程。浏览器和服务器只有一次互动的机会，浏览器主动发起，而服务器被动地根据收到的请求内容返回结果。一个完整的请求都需要经过DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="性能优化" scheme="https://whjin.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CSS团队协作规范</title>
    <link href="https://whjin.github.io/2019/05/06/technical/CSS%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83/"/>
    <id>https://whjin.github.io/2019/05/06/technical/CSS团队协作规范/</id>
    <published>2019-05-06T14:23:17.000Z</published>
    <updated>2023-01-27T07:13:04.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命名禁止缩写"><a href="#命名禁止缩写" class="headerlink" title="命名禁止缩写"></a>命名禁止缩写</h1><ul><li>精简扼要地对<code>class</code>命名，请勿使用自定义缩写。</li><li><code>class name</code>的命名必须是行为、有语意的。</li></ul><span id="more"></span><h1 id="禁止在非特殊情况下写-important"><a href="#禁止在非特殊情况下写-important" class="headerlink" title="禁止在非特殊情况下写!important"></a>禁止在非特殊情况下写!important</h1><ul><li>CSS本身有权重设计，任意地使用<code>!important</code>会造成权重混乱而无法维护。</li></ul><h1 id="不可轻易限定宽高"><a href="#不可轻易限定宽高" class="headerlink" title="不可轻易限定宽高"></a>不可轻易限定宽高</h1><ul><li>用户可以自行设定自己的浏览器，例如<code>Android</code>手机可以设定显示字体大小，写死的高度会让字体相互重叠。</li></ul><h2 id="RWD失效"><a href="#RWD失效" class="headerlink" title="RWD失效"></a>RWD失效</h2><ul><li>移动设备的高度是无限的，宽度是有限的。</li><li>请不要把宽写死。</li></ul><h1 id="img请让它自动缩放"><a href="#img请让它自动缩放" class="headerlink" title="img请让它自动缩放"></a>img请让它自动缩放</h1><ul><li>请不要替<code>img</code>的容器设定宽或高，让它根据设备自行缩放。</li><li>请使用<code>bootstrap</code>的<code>img-responsive</code>。</li><li>如果确实要用：  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: auto;</span><br></pre></td></tr></table></figure></li><li>如果要给<code>img border-radius</code>设定样式，请使用父元素控制行为，保持<code>img</code>只载入图片，没有样式。</li></ul><h1 id="优先使用grid排版"><a href="#优先使用grid排版" class="headerlink" title="优先使用grid排版"></a>优先使用grid排版</h1><ul><li>请不要花很多时间在写<code>media query</code>，设定一堆<code>breakpoint</code>，自己写组件样式，自己控制每种设备上的容器宽度。</li><li>请使用<code>grid system</code>，这些都是已经成熟的框架，而且有些也已经帮你处理了浏览器相容问题。</li></ul><h1 id="不可直接over-write或在原本框架的class增加内容"><a href="#不可直接over-write或在原本框架的class增加内容" class="headerlink" title="不可直接over write或在原本框架的class增加内容"></a>不可直接over write或在原本框架的class增加内容</h1><ul><li>直接写一个新的<code>class</code>，不要覆盖原有的设计。</li><li>不要再已有的<code>class</code>上添加样式，请额外单独写一个。</li></ul><h1 id="设计RWD网站，请遵循移动设备优先原则"><a href="#设计RWD网站，请遵循移动设备优先原则" class="headerlink" title="设计RWD网站，请遵循移动设备优先原则"></a>设计RWD网站，请遵循移动设备优先原则</h1><ul><li>设计师的设计顺序，以桌面版优先，再设计手机版。</li><li>前端工程师拿到视觉图，开始写<code>HTML/CSS</code>时以手机版为第一优先。</li></ul><blockquote><p>手机开启网页很吃手机效能和网络状况，前端工程师一开始就以手机版为优先，可以让HTML一开始载入，使用最少的效能快速载入网页。当开始制作桌面版时，只会少许跑版，做适当微调即可。<br>相反，如果先制作桌面版，当手机版画面被切掉或是跑版，需要花更多时间去调整。</p></blockquote><blockquote><p>再来是iPhone手机的<code>retina</code>，会将图片放到手机上时自动做两倍缩小，在一开始制作时即可发现图片载入是否吃效能。为了让图片能在iPhone上有更好的体验，建议移动版优先。</p></blockquote><h1 id="不可使用html-tag-selector"><a href="#不可使用html-tag-selector" class="headerlink" title="不可使用html tag selector"></a>不可使用html tag selector</h1><ul><li>请直接定义<code>class</code>的样式，不需要指定<code>html tag</code>。</li></ul><h1 id="层级不可以超过三层"><a href="#层级不可以超过三层" class="headerlink" title="层级不可以超过三层"></a>层级不可以超过三层</h1><ul><li>超过三层表示耦合度太高，不具有弹性、可维护性。</li></ul><h1 id="用一样的element时不要把一堆东西全部写在里面，请把排版相关的独立出来"><a href="#用一样的element时不要把一堆东西全部写在里面，请把排版相关的独立出来" class="headerlink" title="用一样的element时不要把一堆东西全部写在里面，请把排版相关的独立出来"></a>用一样的element时不要把一堆东西全部写在里面，请把排版相关的独立出来</h1><ul><li>把<code>border-radius</code>写在<code>img</code>上面，请把<code>img</code>保持干净。定位，例如<code>position: absolute;</code></li></ul><h1 id="不要随意none掉画面上的tag或行为"><a href="#不要随意none掉画面上的tag或行为" class="headerlink" title="不要随意none掉画面上的tag或行为"></a>不要随意none掉画面上的tag或行为</h1><ul><li>请注意如果要<code>none</code>掉一些样式，请依照使用程度决定。</li><li>使用程度遍布整个网站，请直接使用<code>reset.css</code></li><li>使用程度中等以下，请定义一个<code>class</code></li></ul><h2 id="reset-css"><a href="#reset-css" class="headerlink" title="reset.css"></a>reset.css</h2><ul><li>常见的<code>a tag</code>不要有<code>underline</code></li><li><code>list</code>消除原有样式</li><li>请在<code>reset.css</code>上定义，并且设为第一载入次序</li></ul><h1 id="有JavaScript行为的class可以为命名加入name-space"><a href="#有JavaScript行为的class可以为命名加入name-space" class="headerlink" title="有JavaScript行为的class可以为命名加入name space"></a>有JavaScript行为的class可以为命名加入name space</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#js-project-show &#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="请勿任意使用br-hr-tag"><a href="#请勿任意使用br-hr-tag" class="headerlink" title="请勿任意使用br hr tag"></a>请勿任意使用br hr tag</h1><ul><li><code>br</code>是换行，请使用在<code>p tag</code>里面，当<code>p</code>里面文字过多时可以使用。</li><li><code>hr</code>是快速划线，但是即将被淘汰，请直接使用<code>border</code>写在<code>class</code>里面。</li><li><code>br</code>必须去思考父区块是不是<code>display: block;</code>，如果要换行，应该思考是不是下一段文字。</li><li>线条请都是用<code>border</code>去写。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;命名禁止缩写&quot;&gt;&lt;a href=&quot;#命名禁止缩写&quot; class=&quot;headerlink&quot; title=&quot;命名禁止缩写&quot;&gt;&lt;/a&gt;命名禁止缩写&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;精简扼要地对&lt;code&gt;class&lt;/code&gt;命名，请勿使用自定义缩写。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class name&lt;/code&gt;的命名必须是行为、有语意的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="https://whjin.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="https://whjin.github.io/tags/CSS/"/>
    
      <category term="前端" scheme="https://whjin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
